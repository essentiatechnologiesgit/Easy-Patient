name: iOS Certificate Automation

on:
  push:
    branches:
      - development

env:
  APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPECIFIC_PASSWORD }}'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests

      - name: Generate RSA Private Key and CSR
        run: |
          openssl genpkey -algorithm RSA -out rsa_private.key -pkeyopt rsa_keygen_bits:2048
          openssl req -new -key rsa_private.key -out csr.certSigningRequest -subj "/CN=www.example.com, C=US"

      - name: Display Generated CSR Contents
        run: |
          cat csr.certSigningRequest
      
      # - name: Display Generated CSR Base64 Content
      #   run: |
      #     csr_b64_generated=$(base64 csr.certSigningRequest)
      #     echo "Generated CSR Base64: $csr_b64_generated"

      - name: Generate JWT
        id: generate_jwt
        run: |
          ISSUER_ID="ad39d400-3314-48f8-977c-29a272eebad0"
          KEY_ID="74H4QHFPVP"
          private_key="
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgmtzyTVPL1cphRZjf
          pzIlE/6pV5OFCS6zaUoyqBIHflygCgYIKoZIzj0DAQehRANCAASQxfZ0NyqZre50
          6NGowYahQsvqEQew5MStUc94chxoi8QqtVNTOcsgzqflnQ/v7YeETnnUX+P+2+2E
          +EG+nw8t
          -----END PRIVATE KEY-----
          "

          token=$(ruby -rjwt -ropenssl -e "
            private_key_obj = OpenSSL::PKey::EC.new('$private_key')
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
          
          echo "token=$token" >> $GITHUB_ENV

      - name: Request Distribution Certificate from Apple Developer API
        run: |
          python <<EOF
          import base64
          import requests
          import os
          
          # Hard-coded CSR content (Base64-encoded)
          csr_b64 = '''MIICZTCCAU0CAQAwIDEeMBwGA1UEAwwVd3d3LmV4YW1wbGUuY29tLCBDPVVTMIIB
          IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7kYoaMRTZ4UovLCg/7FR0I9a
          1CDTyBY8Z6lrMevP1IB/mGEmFY0XHMTCn/CkR1sj7dHyTzXGkooCdp52KFHDZPyE
          U3Z0eP9kQSWgUThDrHgtxTCa3mbEZgGTVR1kKkJuevMhpQS2kkpxxOcfHdTMvYRJ
          AVrthCoxrGBzVcSK+KiagHnHUu9dQp26Ag3CNS9UfICCx0Bn0Xz6v19c6f81Aj6S
          NVCCUUM7/yL7hqgPVPLsUny+ZKpKcW3lenxB6i96CFXjdb4qg85p21VzgwmOWd0m
          jsxmDXyAHxCBndiqGadk4rpQz3Brb4dzQiW8l3fIAXr+YO0gP1aPawqwWbJKUwID
          AQABoAAwDQYJKoZIhvcNAQELBQADggEBADhqpDAUslOnR/sBegE8xk+LK5H6+0Hm
          i1lwaWMrSO0zL5CH/c63+ZJDzwLpyfT9J/7kCv4HHY4TIVZ8QDnkvmvbZz7Uflny
          FCnIlivPXpyt5/DNGT8Q/TdQILwwGyeDHjjRrToyzSZMFdZDMxopKSuzJJ/xmYJl
          1u96pVot1/LsqYRRaGBtPOnegzxWrz6oIqy3QS9rqEsivpU4Yd5Qa+3szYgOvGF4
          Qua+iIN7YN8qf6CSrZqbA9hkijXTtv2Cyol9ZGZlPAGQHN4J9b8l4TnD0TMoAahV
          MtCFlvDYw4vEyJuX+DW9GfFKzPC2c6mc6fIx2PXIuCuOFWZtm27/l8Q='''
      
          print(f"CSR Base64 (Hardcoded): {csr_b64}")
      
          # API request to create the distribution certificate
          url = "https://api.appstoreconnect.apple.com/v1/certificates"
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
          data = {
              "data": {
                  "type": "certificates",
                  "attributes": {
                      "certificateType": "IOS_DISTRIBUTION",
                      "csrContent": csr_b64
                  }
              }
          }
          print(f"Request Data: {data}")
      
          response = requests.post(url, json=data, headers=headers)
      
          if response.status_code == 201:
              cert_content = response.json()['data']['attributes']['certificateContent']
              with open('distribution.cer', 'w') as cert_file:
                  cert_file.write(cert_content)
              print("Distribution Certificate created successfully")
          else:
              print("Failed to create Distribution Certificate")
              print(response.status_code)
              print(response.json())
              exit(1)
          EOF


      - name: Convert Certificate to .p12 format
        run: |
          openssl x509 -in distribution.cer -inform PEM -outform DER -out distribution.der
          openssl pkcs12 -export -inkey rsa_private.key -in distribution.der -out distribution.p12 -name "iOS Distribution" -password pass:${{ secrets.P12_PASSWORD }}

      - name: Upload .p12 file as GitHub Actions artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-distribution-p12
          path: distribution.p12

      - name: Import certificate to keychain for signing
        run: |
          security create-keychain -p "temp_password" build.keychain
          security import distribution.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -A
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_password" build.keychain
          security set-keychain-settings build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" build.keychain
