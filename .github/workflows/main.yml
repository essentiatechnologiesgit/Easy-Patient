name: iOS Certificate Automation
on:
  repository_dispatch:
    types: [iOS]
# on:
#   push:
#     branches:
#       - FixesForiOSBuild

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests

      # Access the client payload (extract the bundle ID)
      - name: Access client payload
        run: |
          echo "The bundle ID is: ${{ github.event.client_payload.bundleID }}"

      # Fetch API data and save relevant parts to environment variables
      - name: Fetch API data
        id: fetch_api_data
        run: |
          echo "Fetching data for bundle ID: ${{ github.event.client_payload.bundleID }}"
          RESPONSE=$(curl --location 'https://1531-2400-adc1-1aa-d500-6082-2b22-3d23-7860.ngrok-free.app/getData/${{ github.event.client_payload.bundleID }}')
          echo "API Response: $RESPONSE"

          
          # Parse and export relevant fields from the JSON response using jq
          echo "PRIMARY_COLOR=$(echo "$RESPONSE" | jq -r '.[0].primarycolor')" >> $GITHUB_ENV
          echo "SECONDARY_COLOR=$(echo "$RESPONSE" | jq -r '.[0].secondarycolor')" >> $GITHUB_ENV
          echo "TERTIARY_COLOR=$(echo "$RESPONSE" | jq -r '.[0].tertiarycolor')" >> $GITHUB_ENV
          echo "BACKGROUND_COLOR=$(echo "$RESPONSE" | jq -r '.[0].backgroundcolor // "#FFFFFF"')" >> $GITHUB_ENV
          echo "MODAL_COLOR=$(echo "$RESPONSE" | jq -r '.[0].modalcolor')" >> $GITHUB_ENV
          echo "BUTTON_TEXT_COLOR=$(echo "$RESPONSE" | jq -r '.[0].buttontext')" >> $GITHUB_ENV
          echo "HEADER_COLOR=$(echo "$RESPONSE" | jq -r '.[0].headercolor')" >> $GITHUB_ENV
          echo "BUNDLE_ID=$(echo "$RESPONSE" | jq -r '.[0].bundle_id')" >> $GITHUB_ENV
          echo "KEYWORDS=$(echo "$RESPONSE" | jq -r '.[0].keywords')" >> $GITHUB_ENV
          echo "PROMOTIONAL_TEXT=$(echo "$RESPONSE" | jq -r '.[0].promotionaltext')" >> $GITHUB_ENV
          echo "SUPPORT_URL=$(echo "$RESPONSE" | jq -r '.[0].supporturl // ""')" >> $GITHUB_ENV
          echo "MARKETING_URL=$(echo "$RESPONSE" | jq -r '.[0].marketingurl // ""')" >> $GITHUB_ENV
          echo "IOS_APP_NAME=$(echo "$RESPONSE" | jq -r '.[0].iosappname')" >> $GITHUB_ENV
          echo "DESCRIPTION=$(echo "$RESPONSE" | jq -r '.[0].description')" >> $GITHUB_ENV
          echo "ANDROID_APP_NAME=$(echo "$RESPONSE" | jq -r '.[0].androidappname')" >> $GITHUB_ENV
          echo "SHORT_DESCRIPTION=$(echo "$RESPONSE" | jq -r '.[0].short_description')" >> $GITHUB_ENV
          echo "LONG_DESCRIPTION=$(echo "$RESPONSE" | jq -r '.[0].long_description')" >> $GITHUB_ENV

          # Parse and export relevant fields from the JSON response using jq
          echo "SPLASH_SCREEN=$(echo "$RESPONSE" | jq -r '.[0].splashscreen')" >> $GITHUB_ENV
          echo "LOGO=$(echo "$RESPONSE" | jq -r '.[0].logo')" >> $GITHUB_ENV
          echo "BACKGROUND_IMAGE=$(echo "$RESPONSE" | jq -r '.[0].backgroundimage')" >> $GITHUB_ENV
          echo "SUB_LOGO=$(echo "$RESPONSE" | jq -r '.[0].sublogo')" >> $GITHUB_ENV
          echo "JSON_FILE=$(echo "$RESPONSE" | jq -r '.[0].jsonfile')" >> $GITHUB_ENV      

          echo "ISSUER_ID=$(echo "$RESPONSE" | jq -r '.[0].issuer_id')" >> $GITHUB_ENV
          echo "KEY_ID=$(echo "$RESPONSE" | jq -r '.[0].key_id')" >> $GITHUB_ENV
          echo "private_key=$(echo "$RESPONSE" | jq -r '.[0].private_key')" >> $GITHUB_ENV

      - name: Download private key
        run: |
          echo "${{ env.PRIVATE_KEY }}" > ${{ github.workspace }}/private_key.p8
          echo "Downloaded private key."
      
      - name: Generate JWT Token
        run: |
          ruby -r openssl -r jwt -e "
          issuer_id = ENV['ISSUER_ID']
          key_id = ENV['KEY_ID']
          private_key = File.read('${{ github.workspace }}/private_key.p8')
          
          echo "ISSUER_ID: $ISSUER_ID"
          echo "KEY_ID: $KEY_ID"
          cat ${{ github.workspace }}/private_key.p8

      
          private_key_obj = OpenSSL::PKey::EC.new(private_key)
      
          token = JWT.encode(
            {
              iss: issuer_id,
              exp: Time.now.to_i + 20 * 60,  # 20-minute expiration time
              aud: 'appstoreconnect-v1'
            },
            private_key_obj,
            'ES256',
            kid: key_id
          )
      
          puts token
          "


      # Download images to the assets folder if they don't already exist
      - name: Download splash screen
        run: |
          if [ ! -f ${{ github.workspace }}/src/assets/splashScreen.png ]; then
            curl -o ${{ github.workspace }}/src/assets/splashScreen.png $SPLASH_SCREEN
            echo "Downloaded splash screen."
          else
            echo "Splash screen already exists."
          fi



      - name: Download logo
        run: |
          if [ ! -f ${{ github.workspace }}/src/assets/logo.png ]; then
            curl -o ${{ github.workspace }}/src/assets/logo.png $LOGO
            echo "Downloaded logo."
          else
            echo "Logo already exists."
          fi

      - name: Download background image
        run: |
          if [ ! -f ${{ github.workspace }}/src/assets/backgroundImage.png ]; then
            curl -o ${{ github.workspace }}/src/assets/backgroundImage.png $BACKGROUND_IMAGE
            echo "Downloaded background image."
          else
            echo "Background image already exists."
          fi

      - name: Download sub logo
        run: |
          if [ ! -f ${{ github.workspace }}/src/assets/subLogo.png ]; then
            curl -o ${{ github.workspace }}/src/assets/subLogo.png $SUB_LOGO
            echo "Downloaded sub logo."
          else
            echo "Sub logo already exists."
          fi

      # - name: Download json file
      #   run: |
      #     if [ ! -f ${{ github.workspace }}/android/fastlane/jsonFile.json ]; then
      #       curl -o ${{ github.workspace }}/android/fastlane/jsonFile.json $JSON_FILE
      #       echo "Downloaded Json file."
      #     else
      #       echo "Json file already exists."
      #     fi

      # - name: Listing json file 
      #   run: |
      #     if [ -f ${{ github.workspace }}/android/fastlane/jsonFile.json ]; then
      #       cat ${{ github.workspace }}/android/fastlane/jsonFile.json
      #     else
      #       echo "Json file does not exist."
      #     fi
            
          

      # Update config.js file with the new image paths (using require)
      - name: Update config.js
        run: |
          printf "const config = {
            splashScreen: require('./src/assets/splashScreen.png'),
            logo: require('./src/assets/logo.png'),
            backgroundImage: require('./src/assets/backgroundImage.png'),
            subLogo: require('./src/assets/subLogo.png'),
            primaryColor: \"%s\",
            textColorHeadings: '#2A2A31',
            secondaryColor: \"%s\",
            tertiaryColor: \"%s\",
            backgroundColorImage: '',
            backgroundImageType: 'png',
            backgroundColor: \"%s\",
            modalColor: \"%s\",
            buttonText: \"%s\",
            headerColor: \"%s\",
            BUNDLE_ID: \"%s\",
            keywords: \"%s\",
            promotionalText: \"%s\",
            supportUrl: \"%s\",
            marketingUrl: \"%s\",
            Name: \"%s\",
            description: \"%s\",
            ANDROID_APP_NAME: \"%s\",
            shortDescription: \"%s\",
            longDescription: \"%s\"
          };\n\n\nmodule.exports = config;" \
          "$PRIMARY_COLOR" "$SECONDARY_COLOR" "$TERTIARY_COLOR" \
          "$BACKGROUND_COLOR" "$MODAL_COLOR" "$BUTTON_TEXT_COLOR" \
          "$HEADER_COLOR" "$BUNDLE_ID" "$KEYWORDS" "$PROMOTIONAL_TEXT" \
          "$SUPPORT_URL" "$MARKETING_URL" "$IOS_APP_NAME" "$DESCRIPTION" \
          "$ANDROID_APP_NAME" "$SHORT_DESCRIPTION" "$LONG_DESCRIPTION" > "${{ github.workspace }}/config.js"

      # Print the updated config.js file to the console
      - name: Print updated config.js
        run: |
          echo "Contents of the updated config.js:"
          cat ${{ github.workspace }}/config.js


      - name: Print private key
        run: |
          echo "Private key content:"
          cat ${{ env.PRIVATE_KEY_PATH }}
      





      - name: Save private key to default location
        run: |
          mkdir -p ~/.private_keys
          cp ${{ env.PRIVATE_KEY_PATH }} ~/.private_keys/AuthKey_${{ env.KEY_ID }}.p8
          chmod 600 ~/.private_keys/AuthKey_${{ env.KEY_ID }}.p8
      
      - name: Print private key contents (debugging, remove in production)
        run: |
          cat ~/.private_keys/AuthKey_${{ env.KEY_ID }}.p8



      - name: Fetch Bundle ID
        run: |
          python <<EOF
          import os
          import requests
      
          # Define the Bundle Identifier
          bundle_id = os.getenv("BUNDLE_IDentifier") # Replace with your actual Bundle Identifier
      
          # Define the URL for the App Store Connect API to fetch bundle details
          url = f"https://api.appstoreconnect.apple.com/v1/bundleIds?filter[identifier]={bundle_id}"
      
          # Set the headers with the JWT token
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
      
          # Send the GET request to the API
          response = requests.get(url, headers=headers)
      
          # Check if the request was successful
          if response.status_code == 200:
              bundle_data = response.json()['data']
              
              if len(bundle_data) > 0:
                  # Fetch the Bundle ID
                  bundle_id = bundle_data[0]['id']
                  print(f"Bundle ID: {bundle_id}")
                  
                  # Save the Bundle ID to an environment variable
                  with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                      env_file.write(f"BUNDLE_ID={bundle_id}\n")
              else:
                  print("No bundle ID found for the specified identifier.")
                  exit(1)
          else:
              print("Failed to fetch Bundle ID")
              print(f"Status Code: {response.status_code}")
              print(f"Response: {response.json()}")
              exit(1)
          EOF

      - name: Fetch Bundle ID Information
        run: |
          python <<EOF
          import os
          import requests
      
          # Assuming you've already saved the Bundle ID from the previous steps
          bundle_id = os.getenv('BUNDLE_ID')  # or replace with your specific Bundle ID
      
          # Define the URL for fetching bundle ID information
          url = f"https://api.appstoreconnect.apple.com/v1/bundleIds/{bundle_id}"
      
          # Set the headers with the JWT token
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
      
          # Send the GET request to the API
          response = requests.get(url, headers=headers)
      
          # Print the complete response for debugging
          print("Complete Response:")
          print(response.json())
      
          # Check if the request was successful
          if response.status_code == 200:
              bundle_data = response.json()
              
              # Print the specific details if needed
              print("Bundle Data:")
              print(bundle_data)
              
              # Extract and print the seedId (Team ID)
              seed_id = bundle_data['data']['attributes']['seedId']
              print(f"Seed ID (Team ID): {seed_id}")
              
              # Save the seedId as TEAM_ID in the environment variables
              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f"TEAM_ID={seed_id}\n")
          else:
              print("Failed to fetch Bundle ID information")
              print(f"Status Code: {response.status_code}")
              print(f"Response: {response.json()}")
              exit(1)
          EOF



      - name: Fetch and List Distribution Certificates
        run: |
          python <<EOF
          import os
          import requests
          
          # Define the URL for the App Store Connect API to fetch distribution certificates
          url = "https://api.appstoreconnect.apple.com/v1/certificates?filter[certificateType]=DISTRIBUTION"
          
          # Set the headers with the JWT token
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
          
          # Send the GET request to the API
          response = requests.get(url, headers=headers)
          
          # Check if the request was successful
          if response.status_code == 200:
              cert_data = response.json()['data']
              cert_count = len(cert_data)
              
              print(f"Number of Distribution Certificates: {cert_count}")
              
              # Save the certificate count to an environment variable
              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f"CERTIFICATE_COUNT={cert_count}\n")
          else:
              print("Failed to fetch Distribution Certificates")
              print(f"Status Code: {response.status_code}")
              print(f"Response: {response.json()}")
              exit(1)
          EOF

      - name: Fetch Distribution Certificate Details
        if: env.CERTIFICATE_COUNT == '2'
        run: |
          python <<EOF
          import os
          import requests
          
          # Define the URL for the App Store Connect API to fetch distribution certificates
          url = "https://api.appstoreconnect.apple.com/v1/certificates?filter[certificateType]=DISTRIBUTION"
          
          # Set the headers with the JWT token
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
          
          # Send the GET request to the API
          response = requests.get(url, headers=headers)
          
          # Check if the request was successful
          if response.status_code == 200:
              cert_data = response.json()['data']
              
              # Fetch the first certificate details
              cert = cert_data[0]
              cert_id = cert['id']
              cert_name = cert['attributes']['name']
              cert_serial_number = cert['attributes']['serialNumber']
              cert_expiration_date = cert['attributes']['expirationDate']
              
              print(f"Certificate ID: {cert_id}")
              print(f"Certificate Name: {cert_name}")
              print(f"Serial Number: {cert_serial_number}")
              print(f"Expiration Date: {cert_expiration_date}")
              # Save details to environment variables
              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f"CERT_ID={cert_id}\n")
                  env_file.write(f"CERT_SERIAL_NUMBER={cert_serial_number}\n")
                  env_file.write(f"CERT_EXPIRATION_DATE={cert_expiration_date}\n")
              # Fetch the certificate content
              cert_content = cert['attributes']['certificateContent']
              with open('distribution.cer', 'w') as cert_file:
                  cert_file.write("-----BEGIN CERTIFICATE-----\n")
                  cert_file.write(cert_content + "\n")
                  cert_file.write("-----END CERTIFICATE-----\n")
              print("Distribution Certificate created successfully")
              
              # Save Certificate ID to a file
              with open('certificate_id.txt', 'w') as id_file:
                  id_file.write(cert_id)

              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f"CERTIFICATE_NAME={cert_name}\n")     
          else:
              print("Failed to fetch Distribution Certificates")
              print(f"Status Code: {response.status_code}")
              print(f"Response: {response.json()}")
              exit(1)
          EOF

      - name: Check for Existing RSA Private Key
        id: check_rsa_key
        run: |
          if [ -f "$GITHUB_WORKSPACE/rsa_private.key" ]; then
            echo "RSA private key found."
            echo "RSA_KEY_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RSA private key not found."
            echo "RSA_KEY_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: Generate RSA Private Key 
        if: env.RSA_KEY_EXISTS == 'false'
        run: |
          openssl genpkey -algorithm RSA -out "$GITHUB_WORKSPACE/rsa_private.key" -pkeyopt rsa_keygen_bits:2048
          echo "Generated a new RSA private key."

      - name: Generate CSR using Private key
        if: env.CERTIFICATE_COUNT != '2'
        run: |
          openssl req -new -key "$GITHUB_WORKSPACE/rsa_private.key" -out csr.certSigningRequest -subj "/CN=suporte@easy-health.app, C=US"

      - name: Display CSR Contents
        if: env.CERTIFICATE_COUNT != '2'
        id: display_csr
        run: |
          csr_content=$(cat csr.certSigningRequest)
          echo "CSR Content: $csr_content"
          echo "CSR_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$csr_content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Request and Save Distribution Certificate
        if: env.CERTIFICATE_COUNT != '2'
        run: |
          python <<EOF
          import os
          import requests
          
          csr_content = os.getenv('CSR_CONTENT')
          
          url = "https://api.appstoreconnect.apple.com/v1/certificates"
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
          data = {
              "data": {
                "type": "certificates",
                "attributes": {
                  "certificateType": "DISTRIBUTION",
                  "csrContent": csr_content
                }
              }
          }
          
          response = requests.post(url, json=data, headers=headers)
          
          if response.status_code == 201:
              cert_data = response.json()['data']
              cert_id = cert_data['id']
              cert_name = cert_data['attributes']['name']
              cert_serial_number = cert_data['attributes']['serialNumber']
              
              print(f"Certificate ID: {cert_id}")
              print(f"Serial Number: {cert_serial_number}")
              
              # Save the certificate content to a file
              cert_content = cert_data['attributes']['certificateContent']
              with open('distribution.cer', 'w') as cert_file:
                  cert_file.write("-----BEGIN CERTIFICATE-----\n")
                  cert_file.write(cert_content + "\n")
                  cert_file.write("-----END CERTIFICATE-----\n")
              print("Distribution Certificate created successfully")
              
              # Save Certificate ID to a file
              with open('certificate_id.txt', 'w') as id_file:
                  id_file.write(cert_id)

              with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
                  env_file.write(f"CERTIFICATE_NAME={cert_name}\n")   

          else:
              print("Failed to create Distribution Certificate")
              print(response.status_code)
              print(response.json())
              exit(1)
          EOF
      
      - name: Set Certificate ID as Environment Variable
        run: echo "CERTIFICATE_ID=$(cat certificate_id.txt)" >> $GITHUB_ENV

      - name: Debug - Print Certificate Content
        run: cat distribution.cer

      - name: Convert Certificate to .p12 format
        run: |
          CERT_P12_PASSWORD="private_pass"
      
          openssl pkcs12 -export -inkey "$GITHUB_WORKSPACE/rsa_private.key" -in distribution.cer -out distribution.p12 -password pass:$CERT_P12_PASSWORD
     
      - name: Upload .p12 file as GitHub Actions artifact
        uses: actions/upload-artifact@v3
        with:
          name: distribution-certificate
          path: distribution.p12
      
      - name: Import certificate to keychain
        run: |
          set -x
          
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PASSWORD="private_pass"
          CERT_P12_PASSWORD="private_pass"
          KEYCHAIN_PATH=~/Library/Keychains/"$KEYCHAIN_NAME"
          
          # Create a new keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          echo "Keychain created: $KEYCHAIN_NAME"
          
          # Set the keychain as the default keychain
          security default-keychain -s "$KEYCHAIN_PATH"
          echo "Default keychain set to: $KEYCHAIN_PATH"
          
          # Add the keychain to the list of keychains
          security list-keychains -s "$KEYCHAIN_PATH"
          echo "Keychain added to the list of keychains: $KEYCHAIN_PATH"
          
          # Unlock the keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "Keychain unlocked: $KEYCHAIN_PATH"
          
          # Set the keychain timeout to 3600 seconds (1 hour)
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_PATH"
          echo "Keychain timeout set to 3600 seconds"
          
          # Import the .p12 file into the keychain
          security import distribution.p12 -k "$KEYCHAIN_PATH" -P "$CERT_P12_PASSWORD" -T /usr/bin/codesign
          echo "Certificate imported to keychain: $KEYCHAIN_PATH"
          
          # Set the key partition list after the certificate is imported
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "Key partition list set for keychain: $KEYCHAIN_PATH"
          
          # Validate that the certificate is present in the keychain
          security find-certificate -a -c "${CERTIFICATE_NAME}" -p
          echo "Certificate found and validated in keychain"

      - name: Create Distribution Provisioning Profile
        run: |
          echo "Creating Distribution Provisioning Profile..."
          
          PROFILE_NAME="MyApp Distribution Profile 17"  
          BUNDLE_ID="${BUNDLE_ID}"
          CERTIFICATE_ID="${{ env.CERTIFICATE_ID }}"  
          
          response=$(curl -X POST https://api.appstoreconnect.apple.com/v1/profiles \
            -H "Authorization: Bearer ${{ env.token }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "data": {
              "type": "profiles",
              "attributes": {
                "name": "$PROFILE_NAME",
                "profileType": "IOS_APP_STORE"
              },
              "relationships": {
                "bundleId": {
                  "data": {
                    "type": "bundleIds",
                    "id": "$BUNDLE_ID"
                  }
                },
                "certificates": {
                  "data": [
                    {
                      "type": "certificates",
                      "id": "$CERTIFICATE_ID"
                    }
                  ]
                }
              }
            }
          }
          EOF
          )
      
          echo "Profile Response: $response"
          
          # Save the profile ID or the profile content if needed
          echo "Profile Response: $response"
          
          # Extract the Base64 encoded profile content
          profile_content=$(echo "$response" | jq -r '.data.attributes.profileContent')
          
          # Log the profile content length
          echo "Profile content length: $(echo "$profile_content" | wc -c)"
          
          # Ensure the directory exists before saving the profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Decode the Base64 content and save it as a .mobileprovision file
          echo "$profile_content" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/MyApp_Distribution_Profile_17.mobileprovision

      - name: Create ExportOptions.plist
        run: |
          cat <<EOF > ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ env.TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${{ env.BUNDLE_IDentifier }}</key> <!-- Replace with your actual Bundle Identifier -->
                  <string>MyApp Distribution Profile 17</string> <!-- Replace with your Provisioning Profile Name -->
              </dict>
          </dict>
          </plist>
          EOF

        # *************************************** Prerequisetries End ********************************************


      # ******************************************* Uploading Meta Data **************************************

      # - name: Get App ID
      #   id: get_app_id
      #   run: |
      #     bundle_id=${{ env.BUNDLE_IDentifier }}  # Replace with your app's Bundle ID
      
      #     response=$(curl -X GET \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       "https://api.appstoreconnect.apple.com/v1/apps?filter%5BbundleId%5D=$bundle_id")
      
      #     echo "Response: $response"
      
      #     app_id=$(echo $response | jq -r '.data[0].id')
      
      #     if [ "$app_id" == "null" ] || [ -z "$app_id" ]; then
      #       echo "Failed to retrieve app ID."
      #       exit 1
      #     fi
      
      #     echo "app_id=$app_id" >> $GITHUB_ENV

      # - name: Get App Store Version ID
      #   id: get_app_store_version_id
      #   run: |
      #     response=$(curl -X GET \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       "https://api.appstoreconnect.apple.com/v1/apps/${{ env.app_id }}/appStoreVersions")
      
      #     echo "Response: $response"
      
      #     app_store_version_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first version
      
      #     if [ "$app_store_version_id" == "null" ] || [ -z "$app_store_version_id" ]; then
      #       echo "Failed to retrieve app store version ID."
      #       exit 1
      #     fi
      
      #     echo "app_store_version_id=$app_store_version_id" >> $GITHUB_ENV

      # - name: Get App Store Version Localization ID
      #   id: get_app_store_version_localization_id
      #   run: |
      #     response=$(curl -X GET \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       "https://api.appstoreconnect.apple.com/v1/appStoreVersions/${{ env.app_store_version_id }}/appStoreVersionLocalizations")
      
      #     echo "Response: $response"
      
      #     app_store_version_localization_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first localization
      
      #     if [ "$app_store_version_localization_id" == "null" ] || [ -z "$app_store_version_localization_id" ]; then
      #       echo "Failed to retrieve app store version localization ID."
      #       exit 1
      #     fi
      
      #     echo "app_store_version_localization_id=$app_store_version_localization_id" >> $GITHUB_ENV

      # - name: Update App Store Version Localization
      #   id: update_app_store_version_localization
      #   run: |
      #     response=$(curl -X PATCH \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "data": {
      #           "id": "'${{ env.app_store_version_localization_id }}'",
      #           "type": "appStoreVersionLocalizations",
      #           "attributes": {
      #             "description": "here goes your app description...",
      #             "keywords": "medicine reminder, lembrete de medicamentos, easy patient, easy health, gestão da saúde",
      #             "marketingUrl": null,
      #             "promotionalText": "We introduce new features and improvements to improve your experience",
      #             "supportUrl": "https://easy-health.app/landing-page/index.html"
      #           }
      #         }
      #       }' \
      #       "https://api.appstoreconnect.apple.com/v1/appStoreVersionLocalizations/${{ env.app_store_version_localization_id }}")
          
      #     echo "Update App Store Version Localization Response: $response"


       # ******************************************* Uploading Meta Data END **************************************


      # *************************************** Build Start ******************************************************
  

      - name: Install CocoaPods
        run: gem install cocoapods

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Node.js dependencies
        run: npm install --force

      - name: Install Pods
        run: |
          cd ios
          pod deintegrate
          rm -rf Pods Podfile.lock
          pod update
          pod install

      - name: Install Xcode 15.3
        run: |
          sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
          xcodebuild -version

      - name: Clean Derived Data
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

     
      - name: Clean Build Folder
        run: |
          cd ios
          xcodebuild clean -workspace EasyPatientDynamic.xcworkspace -scheme EasyPatientDynamic -configuration Release

      - name: Build Archive
        run: |
          echo "PRODUCT_BUNDLE_IDENTIFIER is: ${{ env.BUNDLE_IDentifier }}"
          xcodebuild clean archive \
            -workspace ios/EasyPatientDynamic.xcworkspace \
            -scheme EasyPatientDynamic \
            -sdk iphoneos \
            -destination generic/platform=iOS \
            -configuration Release \
            -derivedDataPath ios/build/DerivedData \
            -archivePath ios/build/archive/TestingArchive.xcarchive \
            PROVISIONING_PROFILE_SPECIFIER="MyApp Distribution Profile 17" \
            CODE_SIGN_IDENTITY="${{ env.CERTIFICATE_NAME }}" \
            DEVELOPMENT_TEAM="${{ env.TEAM_ID }}" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_IDentifier }}"


      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath ios/build/archive/TestingArchive.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath ios/build/archive/TestingIPA
      
      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TestingIPA
          path: ios/build/archive/TestingIPA/*.ipa



      # - name: Find IPA file
      #   id: find_ipa
      #   run: |
      #     ipa_path=$(find ios/build/archive/TestingIPA -name "*.ipa" | head -n 1)
      #     echo "IPA_PATH=$ipa_path" >> $GITHUB_ENV
      
      # - name: Upload IPA to App Store Connect
      #   run: |
      #     xcrun altool --upload-app -f "${{ env.IPA_PATH }}" \
      #       -t ios \
      #       --apiKey ${{ env.KEY_ID }} \
      #       --apiIssuer ${{ env.ISSUER_ID }}

 




     
