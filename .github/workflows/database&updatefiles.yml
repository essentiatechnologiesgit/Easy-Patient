name: Database Connect and update config
on:
  repository_dispatch:
    types: [iOS]

jobs:
  upload_screenshots:
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Access the client payload (extract the bundle ID)
      - name: Access client payload
        run: |
          echo "The bundle ID is: ${{ github.event.client_payload.bundleID }}"

      # Fetch API data and log the response
      - name: Fetch API data
        id: fetch_api_data
        run: |
          echo "Fetching data for bundle ID: ${{ github.event.client_payload.bundleID }}"
          RESPONSE=$(curl --location 'https://5713-2400-adc1-1aa-d500-c822-86fc-8187-644d.ngrok-free.app/getData/${{ github.event.client_payload.bundleID }}')
          echo "API Response: $RESPONSE"
          echo "::set-output name=response::$RESPONSE"
      
        # Update config.js file with the API response
        # Update config.js file with the API response
      - name: Update config.js
        run: |
          # Safely retrieve the API response and ensure JSON handling
          API_RESPONSE="${{ steps.fetch_api_data.outputs.response }}"
      
          # Parse values from the JSON response using jq
          SPLASH_SCREEN=$(echo "$API_RESPONSE" | jq -r '.[0].splashscreen // ""')
          PRIMARY_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].primarycolor // "#000000"')
          SECONDARY_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].secondarycolor // "#000000"')
          TERTIARY_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].tertiarycolor // "#000000"')
          LOGO=$(echo "$API_RESPONSE" | jq -r '.[0].logo // ""')
          BACKGROUND_IMAGE=$(echo "$API_RESPONSE" | jq -r '.[0].backgroundimage // ""')
          BACKGROUND_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].backgroundcolor // "#FFFFFF"')
          MODAL_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].modalcolor // "#FFFFFF"')
          BUTTON_TEXT_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].buttontext // "#FFFFFF"')
          HEADER_COLOR=$(echo "$API_RESPONSE" | jq -r '.[0].headercolor // "#FFFFFF"')
          BUNDLE_ID=$(echo "$API_RESPONSE" | jq -r '.[0].bundle_id // ""')
          KEYWORDS=$(echo "$API_RESPONSE" | jq -r '.[0].keywords // ""')
          PROMOTIONAL_TEXT=$(echo "$API_RESPONSE" | jq -r '.[0].promotionaltext // ""')
          SUPPORT_URL=$(echo "$API_RESPONSE" | jq -r '.[0].supporturl // ""')
          MARKETING_URL=$(echo "$API_RESPONSE" | jq -r '.[0].marketingurl // ""')
          IOS_APP_NAME=$(echo "$API_RESPONSE" | jq -r '.[0].iosappname // ""')
          DESCRIPTION=$(echo "$API_RESPONSE" | jq -r '.[0].description // ""')
          ISSUER_ID=$(echo "$API_RESPONSE" | jq -r '.[0].issuer_id // ""')
          KEY_ID=$(echo "$API_RESPONSE" | jq -r '.[0].key_id // ""')
          PRIVATE_KEY=$(echo "$API_RESPONSE" | jq -r '.[0].private_key // ""')
      
          # Write the config.js file
          cat > "${{ github.workspace }}/config.js" <<EOL
          const config = {
            splashScreen: '${SPLASH_SCREEN}',  // Use URL directly
            primaryColor: '${PRIMARY_COLOR}',
            textColorHeadings: '#2A2A31',
            secondaryColor: '${SECONDARY_COLOR}',
            tertiaryColor: '${TERTIARY_COLOR}',
            logo: '${LOGO}',  // Use URL directly
            backgroundImage: '${BACKGROUND_IMAGE}',  // Use URL directly
            backgroundColorImage: '',
            backgroundImageType: 'png',
            subLogo: '${LOGO}',  // Fix subLogo to use LOGO instead of backgroundImage
            backgroundColor: '${BACKGROUND_COLOR}',
            modalColor: '${MODAL_COLOR}',
            buttonText: '${BUTTON_TEXT_COLOR}',
            headerColor: '${HEADER_COLOR}',
            BUNDLE_ID: '${BUNDLE_ID}',
            keywords: '${KEYWORDS}',
            promotionalText: '${PROMOTIONAL_TEXT}',
            supportUrl: '${SUPPORT_URL}',
            marketingUrl: '${MARKETING_URL}',
            Name: '${IOS_APP_NAME}',
            description: '${DESCRIPTION}',
            ISSUER_ID: '${ISSUER_ID}',
            KEY_ID: '${KEY_ID}',
            private_key: \`
            ${PRIVATE_KEY}
            \`
          };
      
          console.log('Config data:', config);
      
          module.exports = config;
          EOL



      # Print the updated config.js file to the console
      - name: Print updated config.js
        run: |
          echo "Contents of the updated config.js:"
          cat ${{ github.workspace }}/config.js
