name: CI/CD for STAGE

on:
  push:
    branches:
      - development

env:
  BUILD_CERTIFICATE_BASE64: '${{ secrets.BUILD_CERTIFICATE_BASE64 }}'
  P12_PASSWORD: '${{ secrets.P12_PASSWORD }}'
  BUILD_PROVISION_PROFILE_BASE64: '${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}'
  KEYCHAIN_PASSWORD: '${{ secrets.KEYCHAIN_PASSWORD }}'
  APPSTORE_USERNAME: '${{ secrets.APPLEID_USERNAME }}'
  APPSTORE_PASSWORD: '${{ secrets.APPLEID_PASSWORD }}'
  APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPEC_PASSWORD }}'
  EXPORT_OPTIONS_PLIST: '${{ secrets.EXPORT_OPTIONS_PLIST }}'
  XCODE_VERSION: '15.3'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.12.1

      - name: Install Ruby and Cocoapods
        run: |
          gem install cocoapods

      - name: Install Node.js dependencies
        run: npm install --force

      - name: Install Pods
        run: |
          cd ios
          pod install
          cd ..

      - name: Select Xcode version
        run: |
          echo "Checking for Xcode ${{ env.XCODE_VERSION }}..."

          # List installed Xcode versions
          ls /Applications | grep Xcode

          echo "-----------------------------------------"

          # Check if the desired Xcode version is installed
          if ! xcode_exists=$(ls /Applications | grep "Xcode_${{ env.XCODE_VERSION }}.app"); then
            echo "Xcode ${{ env.XCODE_VERSION }} not found. Please install it or update the XCODE_VERSION variable."
            exit 1
          else
            echo "Xcode ${{ env.XCODE_VERSION }} is already installed."
            sudo xcode-select -switch /Applications/Xcode_${{ env.XCODE_VERSION }}.app
            /usr/bin/xcodebuild -version
          fi

      # Continue with the rest of your steps...
