name: CI/CD for STAGE

on:
  push:
    branches:
      - freeze

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.12.1'

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests

      - name: Generate JWT
        id: generate_jwt
        run: |
          ISSUER_ID="ad39d400-3314-48f8-977c-29a272eebad0"
          KEY_ID="74H4QHFPVP"
          private_key="
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgmtzyTVPL1cphRZjf
          pzIlE/6pV5OFCS6zaUoyqBIHflygCgYIKoZIzj0DAQehRANCAASQxfZ0NyqZre50
          6NGowYahQsvqEQew5MStUc94chxoi8QqtVNTOcsgzqflnQ/v7YeETnnUX+P+2+2E
          +EG+nw8t
          -----END PRIVATE KEY-----
          "

          token=$(ruby -rjwt -ropenssl -e "
            private_key_obj = OpenSSL::PKey::EC.new('$private_key')
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
          
          echo "token=$token" >> $GITHUB_ENV


      - name: Retrieve App ID by Bundle Identifier
        id: retrieve_app_id
        run: |
          bundle_id="com.org.easyPatientTesting3"  # Replace with your actual Bundle Identifier
          token="${{ env.token }}"  # Use the token generated earlier
      
          response=$(curl -X GET "https://api.appstoreconnect.apple.com/v1/apps?filter\[bundleId\]=$bundle_id" \
            -H "Authorization: Bearer $token" \
            -H "Content-Type: application/json")
      
          # Parse the response to get the App ID
          app_id=$(echo "$response" | jq -r '.data[0].id')
      
          if [ -z "$app_id" ]; then
            echo "Error: App with Bundle ID '$bundle_id' not found."
            exit 1
          fi
      
          echo "App ID: $app_id"
          echo "app_id=$app_id" >> $GITHUB_ENV


      - name: Update App Metadata
        run: |
          app_id="${{ env.app_id }}"  # Use the app ID retrieved in the previous step
          token="${{ env.token }}"    # Use the token generated earlier
      
          metadata=$(cat <<EOF
          {
            "data": {
              "type": "apps",
              "id": "$app_id",
              "attributes": {
                "name": "New App Name",  # Replace with your app's name
                "primaryCategory": "BUSINESS",  # Replace with your primary category
                "secondaryCategory": "PRODUCTIVITY",  # Replace with your secondary category
                "privacyPolicyUrl": "https://example.com/privacy",  # Replace with your privacy policy URL
                "marketingUrl": "https://example.com/marketing",  # Replace with your marketing URL
                "supportUrl": "https://example.com/support",  # Replace with your support URL
                "description": "This is an updated description of the app.",  # Replace with your app description
                "keywords": "keyword1, keyword2",  # Replace with your app keywords
                "releaseNotes": "These are the release notes for this version.",  # Replace with your release notes
                "contentRating": "12+"  # Replace with your app's content rating
              }
            }
          }
          EOF
          )
      
          curl -X PATCH "https://api.appstoreconnect.apple.com/v1/apps/$app_id" \
            -H "Authorization: Bearer $token" \
            -H "Content-Type: application/json" \
            -d "$metadata"



