name: iOS Certificate Automation

on:
  push:
    branches:
      - development

env:
  # BUILD_CERTIFICATE_BASE64: '${{ secrets.BUILD_CERTIFICATE_BASE64 }}'
  # P12_PASSWORD: '${{ secrets.P12_PASSWORD }}'
  # BUILD_PROVISION_PROFILE_BASE64: '${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}'
  # KEYCHAIN_PASSWORD: '${{ secrets.KEYCHAIN_PASSWORD }}'
  # APPSTORE_USERNAME: '${{ secrets.APPLEID_USERNAME }}'
  # APPSTORE_PASSWORD: '${{ secrets.APPLEID_PASSWORD }}'
  APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPECIFIC_PASSWORD }}'
  # EXPORT_OPTIONS_PLIST: '${{ secrets.EXPORT_OPTIONS_PLIST }}'
  # XCODE_VERSION: '15.3'
  # APP_STORE_CONNECT_PRIVATE_KEY: '${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}'
  # APP_STORE_CONNECT_ISSUER_ID: 'ad39d400-3314-48f8-977c-29a272eebad0'
  # APP_STORE_CONNECT_KEY_ID: '74H4QHFPVP'


jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests

      - name: Generate Certificate Signing Request (CSR)
        run: |
          private_key="
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgmtzyTVPL1cphRZjf
          pzIlE/6pV5OFCS6zaUoyqBIHflygCgYIKoZIzj0DAQehRANCAASQxfZ0NyqZre50
          6NGowYahQsvqEQew5MStUc94chxoi8QqtVNTOcsgzqflnQ/v7YeETnnUX+P+2+2E
          +EG+nw8t
          -----END PRIVATE KEY-----
          "
      
          cert_common_name="www.example.com"
          
          echo "$private_key" > private.key
          openssl req -new -key private.key -out csr.certSigningRequest -subj "/CN=$cert_common_name, C=US"
      
      - name: Display CSR Contents
        run: |
          cat csr.certSigningRequest
      
      - name: Verify CSR
        run: |
          openssl req -text -noout -verify -in csr.certSigningRequest


      - name: Generate JWT
        id: generate_jwt
        run: |

          ISSUER_ID="ad39d400-3314-48f8-977c-29a272eebad0"
          KEY_ID="74H4QHFPVP"
          private_key="
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgmtzyTVPL1cphRZjf
          pzIlE/6pV5OFCS6zaUoyqBIHflygCgYIKoZIzj0DAQehRANCAASQxfZ0NyqZre50
          6NGowYahQsvqEQew5MStUc94chxoi8QqtVNTOcsgzqflnQ/v7YeETnnUX+P+2+2E
          +EG+nw8t
          -----END PRIVATE KEY-----
          "

          token=$(ruby -rjwt -ropenssl -e "
            private_key_obj = OpenSSL::PKey::EC.new('$private_key')
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
          
          echo "token=$token" >> $GITHUB_ENV

      - name: Request Distribution Certificate from Apple Developer API
        run: |
          python <<EOF
          import base64
          import requests
          import os

          # Read CSR file
          with open('csr.certSigningRequest', 'rb') as csr_file:
              csr_content = csr_file.read()

          # Base64 encode the CSR content
          csr_b64 = base64.b64encode(csr_content).decode('utf-8')
          print(f"CSR Base64: {csr_b64}")

          # API request to create the distribution certificate
          url = "https://api.appstoreconnect.apple.com/v1/certificates"
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
              "Content-Type": "application/json"
          }
          data = {
              "data": {
                  "type": "certificates",
                  "attributes": {
                      "certificateType": "IOS_DISTRIBUTION",
                      "csrContent": csr_b64
                  }
              }
          }
          print(f"Request Data: {data}")

          response = requests.post(url, json=data, headers=headers)

          if response.status_code == 201:
              cert_content = response.json()['data']['attributes']['certificateContent']
              with open('distribution.cer', 'w') as cert_file:
                  cert_file.write(cert_content)
              print("Distribution Certificate created successfully")
          else:
              print("Failed to create Distribution Certificate")
              print(response.status_code)
              print(response.json())
              exit(1)
          EOF


      - name: Convert Certificate to .p12 format
        run: |
          openssl x509 -in distribution.cer -inform PEM -outform DER -out distribution.der
          openssl pkcs12 -export -inkey private.key -in distribution.der -out distribution.p12 -name "iOS Distribution" -password pass:${{ secrets.P12_PASSWORD }}

      - name: Upload .p12 file as GitHub Actions artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-distribution-p12
          path: distribution.p12

      - name: Import certificate to keychain for signing
        run: |
          security create-keychain -p "temp_password" build.keychain
          security import distribution.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -A
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_password" build.keychain
          security set-keychain-settings build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" build.keychain
