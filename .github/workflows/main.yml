name: CI/CD for STAGE

on:
  push:
    branches:
      - development

env:
  BUILD_CERTIFICATE_BASE64: '${{ secrets.BUILD_CERTIFICATE_BASE64 }}'
  P12_PASSWORD: '${{ secrets.P12_PASSWORD }}'
  BUILD_PROVISION_PROFILE_BASE64: '${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}'
  KEYCHAIN_PASSWORD: '${{ secrets.KEYCHAIN_PASSWORD }}'
  APPSTORE_USERNAME: '${{ secrets.APPLEID_USERNAME }}'
  APPSTORE_PASSWORD: '${{ secrets.APPLEID_PASSWORD }}'
  APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPECIFIC_PASSWORD }}'
  EXPORT_OPTIONS_PLIST: '${{ secrets.EXPORT_OPTIONS_PLIST }}'
  XCODE_VERSION: '15.3'
  APP_STORE_CONNECT_PRIVATE_KEY: '${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}'
  APP_STORE_CONNECT_ISSUER_ID: '${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}'
  APP_STORE_CONNECT_KEY_ID: '${{ secrets.APP_STORE_CONNECT_KEY_ID }}'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 20.12.1

      # - name: Install Ruby and Cocoapods
      #   run: |
      #     gem install cocoapods

      # - name: Install Node.js dependencies
      #   run: npm install --force

      # - name: Install Pods
      #   run: |
      #     cd ios
      #     pod install
      #     cd ..

      # - name: Select Xcode version
      #   run: |
      #     echo "Checking for Xcode ${{ env.XCODE_VERSION }}..."

      #     # List installed Xcode versions
      #     ls /Applications | grep Xcode

      #     echo "-----------------------------------------"

      #     # Check if the desired Xcode version is installed
      #     if ! xcode_exists=$(ls /Applications | grep "Xcode_${{ env.XCODE_VERSION }}.app"); then
      #       echo "Xcode ${{ env.XCODE_VERSION }} not found. Please install it or update the XCODE_VERSION variable."
      #       exit 1
      #     else
      #       echo "Xcode ${{ env.XCODE_VERSION }} is already installed."
      #       sudo xcode-select -switch /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      #       /usr/bin/xcodebuild -version
      #     fi

      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Check Certificate and provisioning profile
        run: |
          echo "Checking certificate..."
          security find-identity -v -p codesigning
          echo "Checking provisioning profile..."
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Generate JWT
        id: generate_jwt
        run: |
          echo "Generating JWT..."
          npm install jsonwebtoken --force
          token=$(node -e "const jwt = require('jsonwebtoken'); const privateKey = process.env.APP_STORE_CONNECT_PRIVATE_KEY.replace(/\\n/g, '\n'); const token = jwt.sign({}, privateKey, { algorithm: 'ES256', expiresIn: '5m', issuer: process.env.APP_STORE_CONNECT_ISSUER_ID, header: { alg: 'ES256', kid: process.env.APP_STORE_CONNECT_KEY_ID }}); console.log(token);")
          echo "token=$token" >> $GITHUB_ENV
          echo "::set-output name=token::$token"
        env:
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}


      # - name: Extract Bundle ID and App Name from Config
      #   id: extract_bundle_id
      #   run: |
      #     identifier=$(jq -r '.identifier' config.js)
      #     name=$(jq -r '.name' config.js)
      #     echo "identifier=$identifier" >> $GITHUB_ENV
      #     echo "name=$name" >> $GITHUB_ENV
      
      - name: Register Bundle ID
        run: |
          echo "Registering Bundle ID..."
          curl -X POST https://api.appstoreconnect.apple.com/v1/bundleIds \
          -H "Authorization: Bearer ${{ steps.generate_jwt.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
                "data": {
                  "type": "bundleIds",
                  "attributes": {
                    "identifier": "com.example.yourapp",
                    "name": "YourApp",
                    "platform": "IOS"
                  }
                }
              }'



