name: Take iOS Screenshots

on:
  repository_dispatch:
    types: [ScreenshotiOS]

jobs:
  take-screenshots:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK version 17 using Temurin distribution
      - name: Set Up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Install Node.js and NPM dependencies
      - name: Set up Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Access client payload
        run: |
          echo "The bundle ID is: ${{ github.event.client_payload.bundleID }}"
      # Fetch API data and save relevant parts to environment variables
      - name: Fetch API data
        id: fetch_api_data
        run: |
          echo "Fetching data for bundle ID: ${{ github.event.client_payload.bundleID }}"
          RESPONSE=$(curl --location 'https://34e5-2400-adc1-1aa-d500-7029-32e7-5dcb-ea03.ngrok-free.app/fetchData/${{ github.event.client_payload.bundleID }}')
          echo "API Response: $RESPONSE"
          # Parse and export relevant fields from the JSON response using jq
          echo "PRIMARY_COLOR=$(echo "$RESPONSE" | jq -r '.primaryColor')" >> $GITHUB_ENV
          echo "SECONDARY_COLOR=$(echo "$RESPONSE" | jq -r '.secondaryColor')" >> $GITHUB_ENV
          echo "TERTIARY_COLOR=$(echo "$RESPONSE" | jq -r '.tertiaryColor')" >> $GITHUB_ENV
          echo "BACKGROUND_COLOR=$(echo "$RESPONSE" | jq -r '.backgroundColor // "#FFFFFF"')" >> $GITHUB_ENV
          echo "MODAL_COLOR=$(echo "$RESPONSE" | jq -r '.modalColor')" >> $GITHUB_ENV
          echo "BUTTON_TEXT_COLOR=$(echo "$RESPONSE" | jq -r '.buttonTextColor')" >> $GITHUB_ENV
          echo "HEADER_COLOR=$(echo "$RESPONSE" | jq -r '.headerColor')" >> $GITHUB_ENV
          echo "BUNDLE_IDentifier=$(echo "$RESPONSE" | jq -r '.BUNDLE_ID')" >> $GITHUB_ENV
          echo "KEYWORDS=$(echo "$RESPONSE" | jq -r '.keywords')" >> $GITHUB_ENV
          echo "PROMOTIONAL_TEXT=$(echo "$RESPONSE" | jq -r '.promotionalText')" >> $GITHUB_ENV
          echo "SUPPORT_URL=$(echo "$RESPONSE" | jq -r '.supportUrl // ""')" >> $GITHUB_ENV
          echo "MARKETING_URL=$(echo "$RESPONSE" | jq -r '.marketingUrl // ""')" >> $GITHUB_ENV
          echo "IOS_APP_NAME=$(echo "$RESPONSE" | jq -r '.iOSAppName')" >> $GITHUB_ENV
          echo "DESCRIPTION=$(echo "$RESPONSE" | jq -r '.description')" >> $GITHUB_ENV
          echo "ANDROID_APP_NAME=$(echo "$RESPONSE" | jq -r '.androidAppName')" >> $GITHUB_ENV
          echo "SHORT_DESCRIPTION=$(echo "$RESPONSE" | jq -r '.short_description')" >> $GITHUB_ENV
          echo "LONG_DESCRIPTION=$(echo "$RESPONSE" | jq -r '.long_description')" >> $GITHUB_ENV
          echo "SPLASH_SCREEN=$(echo "$RESPONSE" | jq -r '.splashScreenUrl')" >> $GITHUB_ENV
          echo "LOGO=$(echo "$RESPONSE" | jq -r '.logoUrl')" >> $GITHUB_ENV
          echo "BACKGROUND_IMAGE=$(echo "$RESPONSE" | jq -r '.backgroundImageUrl')" >> $GITHUB_ENV
          echo "SUB_LOGO=$(echo "$RESPONSE" | jq -r '.subLogoUrl')" >> $GITHUB_ENV
          echo "JSON_FILE=$(echo "$RESPONSE" | jq -r '.jsonFileUrl')" >> $GITHUB_ENV
          echo "ISSUER_ID=$(echo "$RESPONSE" | jq -r '.ISSUER_ID')" >> $GITHUB_ENV
          echo "KEY_ID=$(echo "$RESPONSE" | jq -r '.KEY_ID')" >> $GITHUB_ENV
          echo "private_key=$(echo "$RESPONSE" | jq -r '.privateKeyURL')" >> $GITHUB_ENV

      - name: Update styles.css
        run: |
          # Create a temporary file to store the variables
          printf "/* colors.css */\n:root {\n" > temp_colors.css
          printf "  --primary-color: %s;\n" "$PRIMARY_COLOR" >> temp_colors.css
          printf "  --text-color-headings: '#2A2A31';\n" >> temp_colors.css
          printf "  --secondary-color: %s;\n" "$SECONDARY_COLOR" >> temp_colors.css
          printf "  --background-color-image: '';\n" >> temp_colors.css
          printf "  --background-color: %s;\n" "$BACKGROUND_COLOR" >> temp_colors.css
          printf "  --modal-color: %s;\n" "$MODAL_COLOR" >> temp_colors.css
          printf "  --button-text-color: %s;\n" "$BUTTON_TEXT_COLOR" >> temp_colors.css
          printf "  --header-color: %s;\n" "$HEADER_COLOR" >> temp_colors.css
          printf "  --font-style: 'OpenSans-Regular';\n" >> temp_colors.css
          printf "  --primary-heading-color: #030303; /* Example color */\n" >> temp_colors.css
          printf "  --splash-background-color: #f1c40f;\n" >> temp_colors.css
          printf "  --logo-color: #e74c3c;\n" >> temp_colors.css
          printf "  --splash-screen: url('./%s');\n" "$SPLASH_SCREEN" >> temp_colors.css
          printf "  --buttonText: %s;\n" "$BUTTON_TEXT_COLOR" >> temp_colors.css
          printf "}\n" >> temp_colors.css
      
          # Append the temp_colors.css to the top of styles.css
          cat "${{ github.workspace }}/.github/workflows/styles.css" >> temp_colors.css
          mv temp_colors.css "${{ github.workspace }}/.github/workflows/styles.css"


      - name: Download splash screen
        run: |
          if [ ! -f ${{ github.workspace }}/.github/workflows/splashScreen.png ]; then
            curl -o ${{ github.workspace }}/.github/workflows/splashScreen.png $SPLASH_SCREEN
            echo "Downloaded splash screen."
          else
            echo "Splash screen already exists."
          fi
      - name: Download logo
        run: |
          if [ ! -f ${{ github.workspace }}/.github/workflows/logo.png ]; then
            curl -o ${{ github.workspace }}/.github/workflows/logo.png $LOGO
            echo "Downloaded logo."
          else
            echo "Logo already exists."
          fi
      - name: Download background image
        run: |
          if [ ! -f ${{ github.workspace }}/.github/workflows/backgroundImage.png ]; then
            curl -o ${{ github.workspace }}/.github/workflows/backgroundImage.png $BACKGROUND_IMAGE
            echo "Downloaded background image."
          else
            echo "Background image already exists."
          fi
      - name: Download sub logo
        run: |
          if [ ! -f ${{ github.workspace }}/.github/workflows/subLogo.png ]; then
            curl -o ${{ github.workspace }}/.github/workflows/subLogo.png $SUB_LOGO
            echo "Downloaded sub logo."
          else
            echo "Sub logo already exists."
          fi
      - name: List files in .github/workflows directory
        run: |
          ls "${{ github.workspace }}/.github/workflows"
      # Step 1: Install Puppeteer
      - name: Install Puppeteer
        run: npm install puppeteer --force
      
      - name: Run Puppeteer to take iPhone 14 screenshots
        run: |
          cat <<EOF > takeScreenshots.js
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
      
          // Define a custom device with desired dimensions
          const customDevice = {
            name: 'Custom iPhone Size',
            userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
            viewport: {
              width: 1320,  // Change this to your desired width
              height: 2868, // Change this to your desired height
              isMobile: true,
              hasTouch: true,
              isLandscape: false,
            },
          };
      
          (async () => {
            const browser = await puppeteer.launch({
              args: ['--no-sandbox', '--disable-setuid-sandbox'],  // Bypass sandbox restrictions
            });
            const page = await browser.newPage();
            await page.emulate(customDevice);  // Emulate the custom device
      
            const filePaths = [
              path.resolve(process.env.GITHUB_WORKSPACE, '.github/workflows', 'page1.html'),
              path.resolve(process.env.GITHUB_WORKSPACE, '.github/workflows', 'page2.html')
            ];
      
            const screenshots = [];
            for (let i = 0; i < filePaths.length; i++) {
              await page.goto('file://' + filePaths[i]);
              const screenshotFileName = 'screenshot-iphone14-' + (i + 1) + '.png';
              await page.screenshot({ path: screenshotFileName });
              screenshots.push(screenshotFileName);
            }
      
            await browser.close();
            console.log('iPhone 14 screenshots taken successfully:', screenshots);
          })();
          EOF
      
      - name: Run Puppeteer Script for iPhone 14
        run: node takeScreenshots.js

      
      # # Step 3: Nexus 7 Screenshots (7 inches)
      # - name: Run Puppeteer to take Nexus 7 screenshots
      #   run: |
      #     cat <<EOF > takeScreenshots.js
      #     const puppeteer = require('puppeteer');
      #     const fs = require('fs');
      #     const path = require('path');
          
      #     const KnownDevices = puppeteer.KnownDevices;
      #     const nexus7 = KnownDevices['Nexus 7'];
          
      #     (async () => {
      #       const browser = await puppeteer.launch();
      #       const page = await browser.newPage();
      #       await page.emulate(nexus7);
            
      #       const filePaths = [
      #         path.resolve(process.env.GITHUB_WORKSPACE, '.github/workflows', 'page1.html'),
      #         path.resolve(process.env.GITHUB_WORKSPACE, '.github/workflows', 'page2.html')
      #       ];
            
      #       const screenshots = [];
      #       for (let i = 0; i < filePaths.length; i++) {
      #         await page.goto('file://' + filePaths[i]);
      #         const screenshotFileName = 'screenshot-nexus7-' + (i + 1) + '.png';
      #         await page.screenshot({ path: screenshotFileName });
      #         screenshots.push(screenshotFileName);
      #       }
            
      #       await browser.close();
      #       console.log('Nexus 7 screenshots taken successfully:', screenshots);
      #     })();
      #     EOF
      
      # - name: Run Puppeteer Script for Nexus 7
      #   run: node takeScreenshots.js
      
      # # Step 4: Nexus 10 Screenshots (10 inches)
      # - name: Run Puppeteer to take Nexus 10 screenshots
      #   run: |
      #     cat <<EOF > takeScreenshots.js
      #     const puppeteer = require('puppeteer');
      #     const fs = require('fs');
      #     const path = require('path');
          
      #     const KnownDevices = puppeteer.KnownDevices;
      #     const nexus10 = KnownDevices['Nexus 10'];
          
      #     (async () => {
      #       const browser = await puppeteer.launch();
      #       const page = await browser.newPage();
      #       await page.emulate(nexus10);
            
      #       const filePaths = [
      #         path.resolve(process.env.GITHUB_WORKSPACE, '.github/workflows', 'page1.html'),
      #         path.resolve(process.env.GITHUB_WORKSPACE, '.github/workflows', 'page2.html')
      #       ];
            
      #       const screenshots = [];
      #       for (let i = 0; i < filePaths.length; i++) {
      #         await page.goto('file://' + filePaths[i]);
      #         const screenshotFileName = 'screenshot-nexus10-' + (i + 1) + '.png';
      #         await page.screenshot({ path: screenshotFileName });
      #         screenshots.push(screenshotFileName);
      #       }
            
      #       await browser.close();
      #       console.log('Nexus 10 screenshots taken successfully!', screenshots);
      #     })();
      #     EOF
      
      # - name: Run Puppeteer Script for Nexus 10
      #   run: node takeScreenshots.js
      
      # Step 5: Upload screenshots as artifacts
      - name: Upload all screenshots as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: |
            screenshot-iphone14-*.png
            # screenshot-nexus7-*.png
            # screenshot-nexus10-*.png
      

      # Step 7: Upload screenshots to App Store Connect (your existing code should work here)



      # ********************************************************************* Prerequisetires Start *******************************************************************


      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Install Ruby JWT gem
        run: gem install jwt
      
      - name: Set up Python virtual environment and install requests
        run: |
          python3 -m venv venv  # Create a virtual environment
          source venv/bin/activate  # Activate the virtual environment
          pip install requests  # Install requests in the virtual environment

      - name: Download private key
        run: |
          curl -o ${{ github.workspace }}/private_key.p8 $private_key
          echo "Downloaded private key."   
      - name: Print private key
        run: |
          echo "Private key content:"
          cat ${{ github.workspace }}/private_key.p8
      - name: Generate JWT
        id: generate_jwt
        run: |
          ISSUER_ID=${{ env.ISSUER_ID }}
          KEY_ID=${{ env.KEY_ID }}
          
          # Load the private key content from the file
          private_key=$(cat "${{ github.workspace }}/private_key.p8")
      
          # Ensure the private key is correctly formatted
          token=$(ruby -rjwt -ropenssl -e "
            require 'openssl'
            require 'jwt'
            
            private_key_obj = OpenSSL::PKey::EC.new('$private_key')
            
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
      
          # Save the generated token in the GitHub Actions environment for later steps
          echo "token=$token" >> $GITHUB_ENV


      - name: Get App ID
        id: get_app_id
        run: |
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/apps")
      
          echo "Full API Response: $response"
      
          app_id=$(echo $response | jq -r '.data[] | select(.attributes.bundleId=="'${{ env.BUNDLE_IDentifier }}'") | .id')
      
          if [ "$app_id" == "null" ] || [ -z "$app_id" ]; then
            echo "Failed to retrieve app ID."
            exit 1
          else
            echo "App ID: $app_id"
          fi

      
          echo "app_id=$app_id" >> $GITHUB_ENV

      - name: Get App Store Version ID
        id: get_app_store_version_id
        run: |
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/apps/${{ env.app_id }}/appStoreVersions")
      
          echo "Response: $response"
      
          app_store_version_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first version
      
          if [ "$app_store_version_id" == "null" ] || [ -z "$app_store_version_id" ]; then
            echo "Failed to retrieve app store version ID."
            exit 1
          fi
      
          echo "app_store_version_id=$app_store_version_id" >> $GITHUB_ENV

      - name: Get App Store Version Localization ID
        id: get_app_store_version_localization_id
        run: |
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/appStoreVersions/${{ env.app_store_version_id }}/appStoreVersionLocalizations")
      
          echo "Response: $response"
      
          app_store_version_localization_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first localization
      
          if [ "$app_store_version_localization_id" == "null" ] || [ -z "$app_store_version_localization_id" ]; then
            echo "Failed to retrieve app store version localization ID."
            exit 1
          fi
      
          echo "app_store_version_localization_id=$app_store_version_localization_id" >> $GITHUB_ENV


      #     # ************************************************* Prerequisetires end ***********************************************




      #     # ***************************************************** SCREENSHOT UPLOAD START 67 *******************************************




      - name: Create Screenshot Set (if none exists)
        id: create_screenshot_set
        run: |
          response=$(curl -X POST \
            -H "Authorization: Bearer ${{ env.token }}" \
            -H "Content-Type: application/json" \
            -d '{
              "data": {
                "type": "appScreenshotSets",
                "attributes": {
                  "screenshotDisplayType": "APP_IPHONE_67"
                },
                "relationships": {
                  "appStoreVersionLocalization": {
                    "data": {
                      "id": "'${{ env.app_store_version_localization_id }}'",
                      "type": "appStoreVersionLocalizations"
                    }
                  }
                }
              }
            }' https://api.appstoreconnect.apple.com/v1/appScreenshotSets)
          echo "Create Screenshot Set Response: $response"
          screenshot_set_id=$(echo $response | jq -r '.data.id')
          echo "screenshot_set_id=$screenshot_set_id" >> $GITHUB_ENV

          
      - name: Upload Screenshots to App Store Connect
        run: |
          # Array to hold screenshot IDs
          screenshot_ids=()
          # Create a mapping file
          touch screenshot_mapping.txt
      
          for screenshot in screenshot-iphone14-*.png; do
            # Step 1: Create the screenshot entity
            response=$(curl -X POST \
              -H "Authorization: Bearer ${{ env.token }}" \
              -H "Content-Type: application/json" \
              -d '{
                "data": {
                  "type": "appScreenshots",
                  "attributes": {
                    "fileName": "'"$(basename "$screenshot")"'",
                    "fileSize": '"$(stat --format=%s "$screenshot")"'
                  },
                  "relationships": {
                    "appScreenshotSet": {
                      "data": {
                         "id": "'${{ env.screenshot_set_id }}'",
                        "type": "appScreenshotSets"
                      }
                    }
                  }
                }
              }' https://api.appstoreconnect.apple.com/v1/appScreenshots)
      
            # Parse the upload URL and other details from the response
            uploadUrl=$(echo "$response" | jq -r '.data.attributes.uploadOperations[0].url')
            contentType=$(echo "$response" | jq -r '.data.attributes.uploadOperations[0].requestHeaders[0].value')
            screenshotId=$(echo "$response" | jq -r '.data.id') # Extract the screenshot ID
      
            # Check if uploadUrl is null or empty
            if [[ -z "$uploadUrl" ]]; then
              echo "Error: Could not get a valid upload URL for screenshot $(basename "$screenshot")"
              exit 1
            fi
      
            # Add screenshot ID to array
            screenshot_ids+=("$screenshotId")
      
            # Save the mapping between screenshotId and filename
            echo "$screenshotId:$(basename "$screenshot")" >> screenshot_mapping.txt
      
            # Step 2: Upload the screenshot file to the provided URL
            curl -X PUT \
              -H "Content-Type: $contentType" \
              --upload-file "$screenshot" \
              "$uploadUrl"
      
            echo "Uploaded screenshot $(basename "$screenshot")"
          done
      
          # Export screenshot IDs to GitHub Actions environment
          echo "SCREENSHOT_IDS=${screenshot_ids[*]}" >> $GITHUB_ENV


      
      - name: Commit Screenshot Reservation
        run: |
          node -e "
            const axios = require('axios');
            const crypto = require('crypto');
            const fs = require('fs');
            const path = require('path');
            const token = '${{ env.token }}';  // Using the extracted token
            const screenshotMappingFile = path.join(__dirname, 'screenshot_mapping.txt');  // Path to the mapping file
            const screenshotMappings = fs.readFileSync(screenshotMappingFile, 'utf-8').trim().split('\\n');
            
            // Parse the screenshot mappings
            const mappings = {};
            screenshotMappings.forEach(line => {
              const [screenshotId, fileName] = line.split(':');
              mappings[screenshotId] = fileName;
            });
      
            // Function to calculate MD5 checksum of a file
            const calculateMD5Checksum = (filePath) => {
              const fileBuffer = fs.readFileSync(filePath);
              const hashSum = crypto.createHash('md5');
              hashSum.update(fileBuffer);
              return hashSum.digest('hex');
            };
      
            // Function to commit the reservation for a screenshot
            async function commitReservation(screenshotId, screenshotPath) {
              const checksum = calculateMD5Checksum(screenshotPath);
              const requestBody = {
                data: {
                  type: 'appScreenshots',
                  id: screenshotId,
                  attributes: {
                    uploaded: true,
                    sourceFileChecksum: checksum,
                  },
                },
              };
      
              try {
                const response = await axios.patch(
                  \`https://api.appstoreconnect.apple.com/v1/appScreenshots/\${screenshotId}\`,
                  requestBody,
                  {
                    headers: {
                      Authorization: \`Bearer \${token}\`,
                      'Content-Type': 'application/json',
                    },
                  }
                );
                console.log('Commit successful for screenshot ID', screenshotId, ':', response.data);
              } catch (error) {
                console.error('Error committing reservation for screenshot ID', screenshotId, ':', error.response ? error.response.data : error.message);
              }
            }
      
            // Loop through the mappings and commit the reservation for each screenshot
            (async () => {
              for (const [screenshotId, fileName] of Object.entries(mappings)) {
                const screenshotPath = path.join(__dirname, fileName);  // Use the filename directly in the current directory
                await commitReservation(screenshotId, screenshotPath);
              }
            })();
          "

