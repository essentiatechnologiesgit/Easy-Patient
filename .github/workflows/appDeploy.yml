name: iOS Screenshot Upload
on:
  push:
    branches:
      - ScreenshotBuild
jobs:
  upload-screenshot:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js Dependencies
        run: npm install axios --force

      - name: Use custom DNS
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3


      # ************************************ Taking screenshots ****************************************

      - name: Install CocoaPods
        run: gem install cocoapods

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Node.js dependencies
        run: npm install --force

      - name: Install Pods
        run: |
          cd ios
          pod deintegrate
          rm -rf Pods Podfile.lock
          pod update
          pod install

      - name: Install Xcode 15.3
        run: |
          sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
          xcodebuild -version

      - name: Clean Derived Data
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

     
      - name: Clean Build Folder
        run: |
          cd ios
          xcodebuild clean -workspace EasyPatientDynamic.xcworkspace -scheme EasyPatientDynamic -configuration Release

      - name: Build for Simulator
        run: |
          xcodebuild clean build \
            -workspace ios/EasyPatientDynamic.xcworkspace \
            -scheme EasyPatientDynamic \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
            -configuration Debug \
            -derivedDataPath ios/build/DerivedData


      - name: List Contents of Build Directory
        run: |
          echo "Listing contents of the Products directory:"
          ls ios/build/DerivedData/Build/Products

      - name: Start Metro Bundler
        run: |
          npx react-native start &


      - name: Find iOS Simulator UUID
        id: find_simulator
        run: |
          SIMULATOR_NAME="iPhone 15 Pro Max" # Change to the desired simulator name
          UUID=$(xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Shutdown" | head -n 1 | awk -F '[()]' '{print $2}')
          echo "Simulator UUID: $UUID"
          echo "SIMULATOR_UUID=$UUID" >> $GITHUB_ENV

      - name: Boot iOS Simulator
        run: |
          xcrun simctl boot ${{ env.SIMULATOR_UUID }}
        

      - name: Install .app File on Simulator
        run: |
          APP_PATH="ios/build/DerivedData/Build/Products/Debug-iphonesimulator/EasyPatientDynamic.app"
          echo "App path: $APP_PATH"

          # Install the .app file on the booted simulator
          xcrun simctl install ${{ env.SIMULATOR_UUID }} "$APP_PATH"

      - name: Launch the App on Simulator
        run: |
          APP_BUNDLE_ID="com.org.easypatientdynamic"
          echo "App Bundle ID: $APP_BUNDLE_ID"

          # Launch the app using the dynamic UUID
          xcrun simctl launch ${{ env.SIMULATOR_UUID }} $APP_BUNDLE_ID

      - name: Take a Screenshot
        run: |
          SCREENSHOT_PATH="./screenshots"
          mkdir -p "$SCREENSHOT_PATH"

          # Wait for the app to load
          sleep 120
          
          # Navigate to the Login screen using deep link
               
          # Capture a screenshot of the Login screen
          xcrun simctl io ${{ env.SIMULATOR_UUID }} screenshot "$SCREENSHOT_PATH/screenshot_login.png"

          sleep 120

          # Navigate to the Dashboard screen using deep link

          # Capture a screenshot of the Dashboard screen
          xcrun simctl io ${{ env.SIMULATOR_UUID }} screenshot "$SCREENSHOT_PATH/screenshot_dashboard.png"
          
      - name: Upload Screenshots as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SimulatorScreenshots
          path: ./screenshots


      - name: Download Screenshots from Artifacts
        uses: actions/download-artifact@v3
        with:
          name: SimulatorScreenshots
          path: ./downloaded_screenshots
          
    # ************************************ End screenshots ****************************************

      - name: Extract variables from config.js
        id: extract-variables
        run: |
          BUNDLE_IDentifier=$(grep -E '^  BUNDLE_ID:' ${{ github.workspace }}/config.js | awk -F '[:,]' '{print $2}' | tr -d '[:space:]' | tr -d \')
          ISSUER_ID=$(grep -E '^  ISSUER_ID:' ${{ github.workspace }}/config.js | awk -F '[:,]' '{print $2}' | tr -d '[:space:]' | tr -d \')
          KEY_ID=$(grep -E '^  KEY_ID:' ${{ github.workspace }}/config.js | awk -F '[:,]' '{print $2}' | tr -d '[:space:]' | tr -d \')
      
          # Handle the private key separately and save it to a file
          awk '/^  private_key:/,/^  "/' ${{ github.workspace }}/config.js | sed -e 's/private_key://g' -e 's/^ *//g' -e '/^$/d' > private_key.pem
      
          echo "BUNDLE_IDentifier=$BUNDLE_IDentifier" >> $GITHUB_ENV
          echo "ISSUER_ID=$ISSUER_ID" >> $GITHUB_ENV
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV
          echo "PRIVATE_KEY_PATH=$PWD/private_key.pem" >> $GITHUB_ENV
      
      - name: Echo extracted variables
        run: |
          echo "Extracted BUNDLE_IDentifier is ${{ env.BUNDLE_IDentifier }}"
          echo "Extracted ISSUER_ID is ${{ env.ISSUER_ID }}"
          echo "Extracted KEY_ID is ${{ env.KEY_ID }}"
          echo "Private key stored at ${{ env.PRIVATE_KEY_PATH }}"

      - name: Use Private Key
        run: |
          cat ${{ env.PRIVATE_KEY_PATH }}

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests jq

      - name: Generate JWT
        id: generate_jwt
        run: |
          ISSUER_ID=${{ env.ISSUER_ID }}
          KEY_ID=${{ env.KEY_ID }}
          private_key=$(cat "${{ env.PRIVATE_KEY_PATH }}")

          # Properly escape and format the private key to avoid issues with newlines
          private_key_formatted=$(echo "$private_key" | sed ':a;N;$!ba;s/\n/\\n/g')

          token=$(ruby -rjwt -ropenssl -e "
            private_key_obj = OpenSSL::PKey::EC.new('$private_key_formatted')
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
          
          echo "token=$token" >> $GITHUB_ENV


      # - name: Get App ID
      #   id: get_app_id
      #   run: |
      #     bundle_id="${{ env.BUNDLE_IDentifier }}"  
      
      #     response=$(curl -X GET \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       "https://api.appstoreconnect.apple.com/v1/apps?filter%5BbundleId%5D=$bundle_id")
      
      #     echo "Response: $response"
      
      #     app_id=$(echo $response | jq -r '.data[0].id')
      
      #     if [ "$app_id" == "null" ] || [ -z "$app_id" ]; then
      #       echo "Failed to retrieve app ID."
      #       exit 1
      #     fi

      - name: Get App ID
        id: get_app_id
        run: |
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/apps")
      
          echo "Full API Response: $response"
      
          app_id=$(echo $response | jq -r '.data[] | select(.attributes.bundleId=="'${{ env.BUNDLE_IDentifier }}'") | .id')
      
          if [ "$app_id" == "null" ] || [ -z "$app_id" ]; then
            echo "Failed to retrieve app ID."
            exit 1
          else
            echo "App ID: $app_id"
          fi

      
          echo "app_id=$app_id" >> $GITHUB_ENV

      - name: Get App Store Version ID
        id: get_app_store_version_id
        run: |
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/apps/${{ env.app_id }}/appStoreVersions")
      
          echo "Response: $response"
      
          app_store_version_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first version
      
          if [ "$app_store_version_id" == "null" ] || [ -z "$app_store_version_id" ]; then
            echo "Failed to retrieve app store version ID."
            exit 1
          fi
      
          echo "app_store_version_id=$app_store_version_id" >> $GITHUB_ENV

      - name: Get App Store Version Localization ID
        id: get_app_store_version_localization_id
        run: |
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/appStoreVersions/${{ env.app_store_version_id }}/appStoreVersionLocalizations")
      
          echo "Response: $response"
      
          app_store_version_localization_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first localization
      
          if [ "$app_store_version_localization_id" == "null" ] || [ -z "$app_store_version_localization_id" ]; then
            echo "Failed to retrieve app store version localization ID."
            exit 1
          fi
      
          echo "app_store_version_localization_id=$app_store_version_localization_id" >> $GITHUB_ENV




      - name: Create Screenshot Set
        id: create_screenshot_set
        run: |
          response=$(curl -X POST \
            -H "Authorization: Bearer ${{ env.token }}" \
            -H "Content-Type: application/json" \
            -d '{
              "data": {
                "type": "appScreenshotSets",
                "attributes": {
                  "screenshotDisplayType": "APP_IPHONE_67"
                },
                "relationships": {
                  "appStoreVersionLocalization": {
                    "data": {
                      "id": "'${{ env.app_store_version_localization_id }}'",
                      "type": "appStoreVersionLocalizations"
                    }
                  }
                }
              }
            }' https://api.appstoreconnect.apple.com/v1/appScreenshotSets)

          echo "Create Screenshot Set Response: $response"
          screenshot_set_id=$(echo $response | jq -r '.data.id')
          echo "screenshot_set_id=$screenshot_set_id" >> $GITHUB_ENV

      - name: Upload Screenshots to App Store Connect
        run: |
          # Array to hold screenshot IDs
          screenshot_ids=()
          # Create a mapping file
          touch screenshot_mapping.txt
      
          for screenshot in downloaded_screenshots/*.png; do
            # Step 1: Create the screenshot entity
            response=$(curl -X POST \
              -H "Authorization: Bearer ${{ env.token }}" \
              -H "Content-Type: application/json" \
              -d '{
                "data": {
                  "type": "appScreenshots",
                  "attributes": {
                    "fileName": "'"$(basename "$screenshot")"'",
                    "fileSize": '"$(stat -f%z "$screenshot")"'
                  },
                  "relationships": {
                    "appScreenshotSet": {
                      "data": {
                        "id": "'${{ env.screenshot_set_id }}'",
                        "type": "appScreenshotSets"
                      }
                    }
                  }
                }
              }' https://api.appstoreconnect.apple.com/v1/appScreenshots)
      
            # Parse the upload URL and other details from the response
            uploadUrl=$(echo "$response" | jq -r '.data.attributes.uploadOperations[0].url')
            contentType=$(echo "$response" | jq -r '.data.attributes.uploadOperations[0].requestHeaders[0].value')
            screenshotId=$(echo "$response" | jq -r '.data.id') # Extract the screenshot ID
      
            # Add screenshot ID to array
            screenshot_ids+=("$screenshotId")
      
            # Save the mapping between screenshotId and filename
            echo "$screenshotId:$(basename "$screenshot")" >> screenshot_mapping.txt
      
            # Step 2: Upload the screenshot file to the provided URL
            curl -X PUT \
              -H "Content-Type: $contentType" \
              --upload-file "$screenshot" \
              "$uploadUrl"
      
            echo "Uploaded screenshot $(basename "$screenshot")"
          done
      
          # Export screenshot IDs to GitHub Actions environment
          echo "SCREENSHOT_IDS=${screenshot_ids[*]}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
       

          
      - name: Commit Uploaded Screenshots
        run: node comittingSS.js



          

        



      
