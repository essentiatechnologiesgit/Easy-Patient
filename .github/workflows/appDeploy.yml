name: iOS Screenshot Upload
on:
  push:
    branches:
      - FixesForiOSBuild
jobs:
  upload-screenshot:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Extract variables from config.js
        id: extract-variables
        run: |
          BUNDLE_IDentifier=$(grep -E '^  BUNDLE_ID:' ${{ github.workspace }}/config.js | awk -F '[:,]' '{print $2}' | tr -d '[:space:]' | tr -d \')
          ISSUER_ID=$(grep -E '^  ISSUER_ID:' ${{ github.workspace }}/config.js | awk -F '[:,]' '{print $2}' | tr -d '[:space:]' | tr -d \')
          KEY_ID=$(grep -E '^  KEY_ID:' ${{ github.workspace }}/config.js | awk -F '[:,]' '{print $2}' | tr -d '[:space:]' | tr -d \')
      
          # Handle the private key separately and save it to a file
          awk '/^  private_key:/,/^  "/' ${{ github.workspace }}/config.js | sed -e 's/private_key://g' -e 's/^ *//g' -e '/^$/d' > private_key.pem
      
          echo "BUNDLE_IDentifier=$BUNDLE_IDentifier" >> $GITHUB_ENV
          echo "ISSUER_ID=$ISSUER_ID" >> $GITHUB_ENV
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV
          echo "PRIVATE_KEY_PATH=$PWD/private_key.pem" >> $GITHUB_ENV
      
      - name: Echo extracted variables
        run: |
          echo "Extracted BUNDLE_IDentifier is ${{ env.BUNDLE_IDentifier }}"
          echo "Extracted ISSUER_ID is ${{ env.ISSUER_ID }}"
          echo "Extracted KEY_ID is ${{ env.KEY_ID }}"
          echo "Private key stored at ${{ env.PRIVATE_KEY_PATH }}"

      - name: Use Private Key
        run: |
          cat ${{ env.PRIVATE_KEY_PATH }}

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests jq

      - name: Generate JWT
        id: generate_jwt
        run: |
          ISSUER_ID=${{ env.ISSUER_ID }}
          KEY_ID=${{ env.KEY_ID }}
          private_key=$(cat "${{ env.PRIVATE_KEY_PATH }}")

          # Properly escape and format the private key to avoid issues with newlines
          private_key_formatted=$(echo "$private_key" | sed ':a;N;$!ba;s/\n/\\n/g')

          token=$(ruby -rjwt -ropenssl -e "
            private_key_obj = OpenSSL::PKey::EC.new('$private_key_formatted')
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
          
          echo "token=$token" >> $GITHUB_ENV


      - name: Get App ID
        id: get_app_id
        run: |
          bundle_id="${{ env.BUNDLE_IDentifier }}"  # Replace with your app's Bundle ID
      
          response=$(curl -X GET \
            -H "Authorization: Bearer ${{ env.token }}" \
            "https://api.appstoreconnect.apple.com/v1/apps?filter%5BbundleId%5D=$bundle_id")
      
          echo "Response: $response"
      
          app_id=$(echo $response | jq -r '.data[0].id')
      
          if [ "$app_id" == "null" ] || [ -z "$app_id" ]; then
            echo "Failed to retrieve app ID."
            exit 1
          fi
      
      #     echo "app_id=$app_id" >> $GITHUB_ENV

      # - name: Get App Store Version ID
      #   id: get_app_store_version_id
      #   run: |
      #     response=$(curl -X GET \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       "https://api.appstoreconnect.apple.com/v1/apps/${{ env.app_id }}/appStoreVersions")
      
      #     echo "Response: $response"
      
      #     app_store_version_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first version
      
      #     if [ "$app_store_version_id" == "null" ] || [ -z "$app_store_version_id" ]; then
      #       echo "Failed to retrieve app store version ID."
      #       exit 1
      #     fi
      
      #     echo "app_store_version_id=$app_store_version_id" >> $GITHUB_ENV

      # - name: Get App Store Version Localization ID
      #   id: get_app_store_version_localization_id
      #   run: |
      #     response=$(curl -X GET \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       "https://api.appstoreconnect.apple.com/v1/appStoreVersions/${{ env.app_store_version_id }}/appStoreVersionLocalizations")
      
      #     echo "Response: $response"
      
      #     app_store_version_localization_id=$(echo $response | jq -r '.data[0].id')  # Assuming you want the first localization
      
      #     if [ "$app_store_version_localization_id" == "null" ] || [ -z "$app_store_version_localization_id" ]; then
      #       echo "Failed to retrieve app store version localization ID."
      #       exit 1
      #     fi
      
      #     echo "app_store_version_localization_id=$app_store_version_localization_id" >> $GITHUB_ENV

      # - name: Update App Store Version Localization
      #   id: update_app_store_version_localization
      #   run: |
      #     response=$(curl -X PATCH \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "data": {
      #           "id": "'${{ env.app_store_version_localization_id }}'",
      #           "type": "appStoreVersionLocalizations",
      #           "attributes": {
      #             "description": "here goes your app description...",
      #             "keywords": "medicine reminder, lembrete de medicamentos, easy patient, easy health, gestão da saúde",
      #             "marketingUrl": null,
      #             "promotionalText": "We introduce new features and improvements to improve your experience",
      #             "supportUrl": "https://easy-health.app/landing-page/index.html"
      #           }
      #         }
      #       }' \
      #       "https://api.appstoreconnect.apple.com/v1/appStoreVersionLocalizations/${{ env.app_store_version_localization_id }}")
          
      #     echo "Update App Store Version Localization Response: $response"


      # - name: Create Screenshot Set
      #   id: create_screenshot_set
      #   run: |
      #     response=$(curl -X POST \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "data": {
      #           "type": "appScreenshotSets",
      #           "attributes": {
      #             "screenshotDisplayType": "APP_IPHONE_65"
      #           },
      #           "relationships": {
      #             "appStoreVersionLocalization": {
      #               "data": {
      #                 "id": "'${{ env.app_store_version_localization_id }}'",
      #                 "type": "appStoreVersionLocalizations"
      #               }
      #             }
      #           }
      #         }
      #       }' \
      #       https://api.appstoreconnect.apple.com/v1/appScreenshotSets)

      #     echo "Create Screenshot Set Response: $response"

      #     screenshot_set_id=$(echo $response | jq -r '.data.id')

      #     if [ "$screenshot_set_id" == "null" ] || [ -z "$screenshot_set_id" ]; then
      #       echo "Failed to create screenshot set or invalid screenshot_set_id."
      #       exit 1
      #     fi

      #     echo "screenshot_set_id=$screenshot_set_id" >> $GITHUB_ENV

      # - name: Upload Screenshot
      #   run: |
      #     file_path="src/assets/Screenshots/04.png"
      #     file_name=$(basename "$file_path")
      #     file_size=$(stat -f%z "$file_path")
      
      #     response=$(curl -X POST \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "data": {
      #           "type": "appScreenshots",
      #           "attributes": {
      #             "fileName": "'$file_name'",
      #             "fileSize": '$file_size'
      #           },
      #           "relationships": {
      #             "appScreenshotSet": {
      #               "data": {
      #                 "id": "ee94f55b-3af8-49c7-806b-3ef5475a5292",
      #                 "type": "appScreenshotSets"
      #               }
      #             }
      #           }
      #         }
      #       }' \
      #       https://api.appstoreconnect.apple.com/v1/appScreenshots)
      
      #     echo "Create Screenshot Response: $response"
      
      #     upload_url=$(echo $response | jq -r '.data.attributes.uploadOperations[0].url')
      
      #     if [ "$upload_url" == "null" ] || [ -z "$upload_url" ]; then
      #       echo "Failed to retrieve upload URL."
      #       exit 1
      #     fi
      
      #     curl -X PUT \
      #       -H "Content-Type: image/png" \
      #       --data-binary "@$file_path" \
      #       "$upload_url"
      
      #     if [ $? -ne 0 ]; then
      #       echo "Failed to upload screenshot."
      #       exit 1
      #     fi



      

