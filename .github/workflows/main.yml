name: CI/CD Pipeline

on: [push]

env:
  BUILD_CERTIFICATE_BASE64: '${{ secrets.BUILD_CERTIFICATE_BASE64 }}'
  P12_PASSWORD: '${{ secrets.P12_PASSWORD }}'
  BUILD_PROVISION_PROFILE_BASE64: '${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}'
  KEYCHAIN_PASSWORD: '${{ secrets.KEYCHAIN_PASSWORD }}'
  APPSTORE_USERNAME: '${{ secrets.APPLEID_USERNAME }}'
  APPSTORE_PASSWORD: '${{ secrets.APPLEID_PASSWORD }}'
  APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPECIFIC_PASSWORD }}'
  EXPORT_OPTIONS_PLIST: '${{ secrets.EXPORT_OPTIONS_PLIST }}'
  XCODE_VERSION: '15.3'
  APP_STORE_CONNECT_PRIVATE_KEY: '${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}'
  APP_STORE_CONNECT_ISSUER_ID: 'ad39d400-3314-48f8-977c-29a272eebad0'
  APP_STORE_CONNECT_KEY_ID: '74H4QHFPVP'

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # - name: Install the Apple certificate
      #   run: |
      #     # Create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # Import certificate from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
      #     # Create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # Import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      # - name: Check Certificate
      #   run: |
      #     echo "Checking certificate..."
      #     security find-identity -v -p codesigning

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Read Config and Print Values
        id: print_config
        run: |
          echo "Reading config and printing values..."
      
          # Run Node.js script to get configuration values using dynamic import
          node -e "
            (async () => {
              const config = await import('./ProjectDirectory/config.js');
              console.log('BUNDLE_ID=' + config.BUNDLE_ID);
              console.log('NAME=' + config.NAME);
            })();
          " > config.env
      
          # Print the config.env file to debug the values
          cat config.env
      
          # Source the config values
          source config.env
      
          # Print the values to verify they are set
          echo "BUNDLE_ID=${BUNDLE_ID}"
          echo "NAME=${NAME}"


      
      # - name: Set up Ruby
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: 3.3

      # - name: Install dependencies (optional)
      #   run: |
      #     gem install jwt

      # - name: Generate JWT
      #   id: generate_jwt
      #   run: |
      #     ISSUER_ID="ad39d400-3314-48f8-977c-29a272eebad0"
      #     KEY_ID="74H4QHFPVP"
      #     private_key="
      #     -----BEGIN PRIVATE KEY-----
      #     MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgmtzyTVPL1cphRZjf
      #     pzIlE/6pV5OFCS6zaUoyqBIHflygCgYIKoZIzj0DAQehRANCAASQxfZ0NyqZre50
      #     6NGowYahQsvqEQew5MStUc94chxoi8QqtVNTOcsgzqflnQ/v7YeETnnUX+P+2+2E
      #     +EG+nw8t
      #     -----END PRIVATE KEY-----
      #     "

      #     token=$(ruby -rjwt -ropenssl -e "
      #       private_key_obj = OpenSSL::PKey::EC.new('$private_key')
      #       token = JWT.encode(
      #         {
      #           iss: '$ISSUER_ID',
      #           exp: Time.now.to_i + 20 * 60,
      #           aud: 'appstoreconnect-v1'
      #         },
      #         private_key_obj,
      #         'ES256',
      #         header_fields = {
      #           kid: '$KEY_ID'
      #         }
      #       )
      #       puts token
      #     ")
          
      #     echo "token=$token" >> $GITHUB_ENV

      # - name: Create Bundle ID
      #   id: create_bundle_id
      #   run: |
      #     echo "Creating Bundle ID..."
          
      #     # Define the Bundle ID parameters
      #     BUNDLE_ID="com.org.easyPatientTesting3"  # Replace with your desired Bundle ID
      #     NAME="Easy Patient Testing 3"                   # Replace with your app name
      #     PLATFORM="IOS"                  # Use "IOS" or "MAC_OS"
          
      #     # Create the Bundle ID
      #     response=$(curl -s -X POST https://api.appstoreconnect.apple.com/v1/bundleIds \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "data": {
      #           "type": "bundleIds",
      #           "attributes": {
      #             "identifier": "'"$BUNDLE_ID"'",
      #             "name": "'"$NAME"'",
      #             "platform": "'"$PLATFORM"'"
      #           }
      #         }
      #       }')
          
      #     echo "Bundle ID Creation Response: $response"
          
      #     # Extract the created Bundle ID
      #     bundle_id=$(echo "$response" | jq -r '.data.id')
      #     echo "Created Bundle ID: $bundle_id"
          
      #     # Save the Bundle ID to the environment variables
      #     echo "bundle_id=$bundle_id" >> $GITHUB_ENV

          
      # - name: Retrieve Certificate ID
      #   id: retrieve_certificate
      #   run: |
      #     echo "Retrieving Certificates..."
      #     response=$(curl -s -X GET https://api.appstoreconnect.apple.com/v1/certificates \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json")
          
      #     echo "$response" > certificates.json
          
      #     # Print the JSON file content for debugging
      #     cat certificates.json
      
      #     # Extract and print certificate ID
      #     certificate_id=$(jq -r '.data[0].id' certificates.json)
      #     echo "Extracted Certificate ID: $certificate_id"
      
      #     # Save the certificate ID to the environment variables
      #     echo "certificate_id=$certificate_id" >> $GITHUB_ENV

      # - name: Retrieve All App IDs
      #   run: |
      #     echo "Retrieving App IDs..."
      #     response=$(curl -s -X GET https://api.appstoreconnect.apple.com/v1/bundleIds \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json")
          
      #     echo "$response" > bundle_ids.json
      #     echo "Bundle IDs Response: $response"

      #     # Extract and print App IDs
      #     bundle_ids=$(jq -r '.data[].id' bundle_ids.json)
      #     echo "App IDs: $bundle_ids"
      #     echo "bundle_ids=$bundle_ids" >> $GITHUB_ENV


      # - name: Create Distribution Provisioning Profile
      #   run: |
      #     echo "Creating Distribution Provisioning Profile..."
          
      #     # Define your parameters
      #     PROFILE_NAME="Easy Patient Distribution Profile 3"
      #     BUNDLE_ID="${{ env.bundle_id }}"  
      #     CERTIFICATE_ID="62SAZ2F6F4"
          
      #     # Create provisioning profile
      #     response=$(curl -X POST https://api.appstoreconnect.apple.com/v1/profiles \
      #       -H "Authorization: Bearer ${{ env.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d @- <<EOF
      #     {
      #       "data": {
      #         "type": "profiles",
      #         "attributes": {
      #           "name": "$PROFILE_NAME",
      #           "profileType": "IOS_APP_STORE"
      #         },
      #         "relationships": {
      #           "bundleId": {
      #             "data": {
      #               "type": "bundleIds",
      #               "id": "$BUNDLE_ID"
      #             }
      #           },
      #           "certificates": {
      #             "data": [
      #               {
      #                 "type": "certificates",
      #                 "id": "$CERTIFICATE_ID"
      #               }
      #             ]
      #           }
      #         }
      #       }
      #     }
      #     EOF
      #     )
      
      #         echo "Profile Response: $response"
          
      #         # Save the profile ID or the profile content if needed
      #         profile_id=$(echo "$response" | jq -r '.data.id')
      #         echo "Extracted Profile ID: $profile_id"
      #         echo "profile_id=$profile_id" >> $GITHUB_ENV

      

