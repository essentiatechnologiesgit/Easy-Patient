name: iOS Screenshot Upload
on:
  push:
    branches:
      - ScreenshotBuild
jobs:
  upload-screenshot:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js Dependencies
        run: npm install axios --force

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3


      # ************************************ Taking screenshots ****************************************

      - name: Install CocoaPods
        run: gem install cocoapods

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Node.js dependencies
        run: npm install --force

      - name: Install Pods
        run: |
          cd ios
          pod deintegrate
          rm -rf Pods Podfile.lock
          pod update
          pod install

      - name: Install Xcode 15.3
        run: |
          sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
          xcodebuild -version

      - name: Clean Derived Data
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

     
      - name: Clean Build Folder
        run: |
          cd ios
          xcodebuild clean -workspace EasyPatientDynamic.xcworkspace -scheme EasyPatientDynamic -configuration Release

      - name: Build for Simulator
        run: |
          xcodebuild clean build \
            -workspace ios/EasyPatientDynamic.xcworkspace \
            -scheme EasyPatientDynamic \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
            -configuration Debug \
            -derivedDataPath ios/build/DerivedData

      - name: Start Metro Bundler
        run: |
          npx react-native start &

      - name: Find iOS Simulator UUID
        id: find_simulator
        run: |
          SIMULATOR_NAME="iPhone 15 Pro Max" # Change to the desired simulator name
          UUID=$(xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Shutdown" | head -n 1 | awk -F '[()]' '{print $2}')
          echo "Simulator UUID: $UUID"
          echo "SIMULATOR_UUID=$UUID" >> $GITHUB_ENV

      - name: Boot iOS Simulator
        run: |
          xcrun simctl boot ${{ env.SIMULATOR_UUID }}
        

      - name: Install .app File on Simulator
        run: |
          APP_PATH="ios/build/DerivedData/Build/Products/Debug-iphonesimulator/EasyPatientDynamic.app"
          echo "App path: $APP_PATH"

          # Install the .app file on the booted simulator
          xcrun simctl install ${{ env.SIMULATOR_UUID }} "$APP_PATH"

      - name: Launch the App on Simulator
        run: |
          APP_BUNDLE_ID="com.org.easypatientdynamic"
          echo "App Bundle ID: $APP_BUNDLE_ID"

          # Launch the app using the dynamic UUID
          xcrun simctl launch ${{ env.SIMULATOR_UUID }} $APP_BUNDLE_ID

      - name: Take a Screenshot
        run: |
          SCREENSHOT_PATH="./screenshots"
          mkdir -p "$SCREENSHOT_PATH"

          # Wait for the app to load
          sleep 120
          
          # Navigate to the Login screen using deep link
               
          # Capture a screenshot of the Login screen
          xcrun simctl io ${{ env.SIMULATOR_UUID }} screenshot "$SCREENSHOT_PATH/screenshot_login.png"

          sleep 120

          # Navigate to the Dashboard screen using deep link

          # Capture a screenshot of the Dashboard screen
          xcrun simctl io ${{ env.SIMULATOR_UUID }} screenshot "$SCREENSHOT_PATH/screenshot_dashboard.png"
          
      - name: Upload Screenshots as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SimulatorScreenshots
          path: ./screenshots


      # - name: Download Screenshots from Artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: SimulatorScreenshots
      #     path: ./downloaded_screenshots

      # - name: List Downloaded Screenshots
      #   run: |
      #     echo "Downloaded Screenshots:"
      #     ls -l ${GITHUB_WORKSPACE}
      #     echo "Downloaded Screenshots:"
      #     ls -l ${GITHUB_WORKSPACE}/downloaded_screenshots

          

      - name: Move Screenshots to Fastlane Directories
        run: |
          # Full path where screenshots are downloaded
          DOWNLOAD_PATH="${{ github.workspace }}/downloaded_screenshots/screenshots"
          
          # Create directories if they don't exist
          mkdir -p ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/phoneScreenshots
          mkdir -p ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/sevenInchScreenshots
          mkdir -p ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/tenInchScreenshots
          
          # Move screenshots from the full download path to the specified directories
          for screenshot in downloaded_screenshots/*.png; do
            if [[ $screenshot == *screenshot_login.png ]]; then
              mv "$screenshot" ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/phoneScreenshots/screenshot_login.png
              mv "$screenshot" ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/sevenInchScreenshots/screenshot_login.png
              mv "$screenshot" ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/tenInchScreenshots/screenshot_login.png
       
            elif [[ $screenshot == *screenshot_dashboard.png ]]; then
              mv "$screenshot" ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/phoneScreenshots/screenshot_dashboard.png
              mv "$screenshot" ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/sevenInchScreenshots/screenshot_dashboard.png
              mv "$screenshot" ${{ github.workspace }}/android/fastlane/metadata/android/en-US/images/tenInchScreenshots/screenshot_dashboard.png
            fi
          done


      # Set up Fastlane and Bundler for deployment
      - name: Install Fastlane and Bundler
        run: |
          sudo gem install bundler
          sudo gem install fastlane

      # Change directory to Android before running Fastlane
      - name: Upload Metadata and Screenshots to Google Play
        run: |
          cd android
          sudo bundle install
          bundle exec fastlane upload_screenshots
