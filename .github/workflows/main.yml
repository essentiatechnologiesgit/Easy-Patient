name: CI/CD for STAGE

on:
  push:
    branches:
      - development

concurrency: 
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  BUILD_CERTIFICATE_BASE64: '${{ secrets.BUILD_CERTIFICATE_BASE64 }}'
  P12_PASSWORD: '${{ secrets.P12_PASSWORD }}'
  BUILD_PROVISION_PROFILE_BASE64: '${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}'
  KEYCHAIN_PASSWORD: '${{ secrets.KEYCHAIN_PASSWORD }}'
  APPSTORE_USERNAME: 'suporte@easy-health.app'
  APPSTORE_PASSWORD: 'Tech$2021'
  APP_SPECIFIC_PASSWORD: 'crff-loxs-jlqi-bglf'
  XCODE_VERSION: '15.3'
  APP_STORE_CONNECT_PRIVATE_KEY: '${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}'
  APP_STORE_CONNECT_ISSUER_ID: 'ad39d400-3314-48f8-977c-29a272eebad0'
  APP_STORE_CONNECT_KEY_ID: '74H4QHFPVP'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Check Certificate and provisioning profile
        run: |
          echo "Checking certificate..."
          security find-identity -v -p codesigning
          echo "Checking provisioning profile..."
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Generate JWT
        id: generate_jwt
        run: |
          echo "Generating JWT..."
          npm install jsonwebtoken --force
          token=$(node -e "const jwt = require('jsonwebtoken'); const privateKey = process.env.APP_STORE_CONNECT_PRIVATE_KEY.replace(/\\n/g, '\n'); const token = jwt.sign({}, privateKey, { algorithm: 'ES256', expiresIn: '5m', issuer: process.env.APP_STORE_CONNECT_ISSUER_ID, header: { alg: 'ES256', kid: process.env.APP_STORE_CONNECT_KEY_ID }}); console.log(token);")
          echo "Generated token: $token"  # This will print the token to the console
          echo "token=$token" >> $GITHUB_ENV


      - name: Retrieve Certificates
        id: get_certificates
        run: |
          echo "Retrieving Certificates..."
          response=$(curl -s -w "%{http_code}" -X GET https://api.appstoreconnect.apple.com/v1/certificates \
            -H "Authorization: Bearer ${{ env.token }}" \
            -H "Content-Type: application/json")
          
          # Extract response body and status code
          body=$(echo "$response" | sed -e 's/^[0-9]*$//')
          status_code=$(echo "$response" | tail -n1)
          
          echo "Response Status Code: $status_code"
          echo "Response Body: $body"
          
          if [ "$status_code" -ne 200 ]; then
            echo "Failed to retrieve certificates. Status code: $status_code"
            exit 1
          fi
      
          echo "$body" > certificates.json
          certificate_id=$(echo "$body" | jq -r '.data[0].id') # Adjust the jq path if necessary
          if [ -z "$certificate_id" ]; then
            echo "No certificate ID found in response"
            exit 1
          fi
          echo "certificate_id=$certificate_id" >> $GITHUB_ENV

      - name: Retrieve Devices
        id: get_devices
        run: |
          echo "Retrieving Devices..."
          devices=$(curl -X GET https://api.appstoreconnect.apple.com/v1/devices \
          -H "Authorization: Bearer ${{ env.token }}" \
          -H "Content-Type: application/json")
          echo "$devices" > devices.json
          device_id=$(echo "$devices" | jq -r '.data[0].id') # Adjust the jq path if necessary
          echo "device_id=$device_id" >> $GITHUB_ENV

      - name: Create Profile
        run: |
          echo "Creating Profile..."
          curl -X POST https://api.appstoreconnect.apple.com/v1/profiles \
          -H "Authorization: Bearer ${{ env.token }}" \
          -H "Content-Type: application/json" \
          -d '{
                "data": {
                  "type": "profiles",
                  "attributes": {
                    "name": "YourApp Development Profile",
                    "profileType": "IOS_APP_DEVELOPMENT",
                    "bundleId": "com.org.easypatientdynamic",
                    "certificates": ["'${{ env.certificate_id }}'"],
                    "devices": ["'${{ env.device_id }}'"]
                  }
                }
              }'
