name: iOS Certificate Automation

on:
  push:
    branches:
      - development

# env:
  # APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPECIFIC_PASSWORD }}'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3

      - name: Install dependencies
        run: |
          gem install jwt
          pip install requests

      - name: Generate RSA Private Key and CSR
        run: |
          openssl genpkey -algorithm RSA -out rsa_private.key -pkeyopt rsa_keygen_bits:2048
          openssl req -new -key rsa_private.key -out csr.certSigningRequest -subj "/CN=www.example.com, C=US"

      - name: Display Generated CSR Contents
        run: |
          cat csr.certSigningRequest

      - name: Display CSR Contents
        id: display_csr
        run: |
          csr_content=$(cat csr.certSigningRequest)
          echo "CSR Content: $csr_content"
          echo "CSR_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$csr_content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Use CSR Content
        run: |
          echo "CSR Content saved in env variable:"
          echo "$CSR_CONTENT"

      - name: Generate JWT
        id: generate_jwt
        run: |
          ISSUER_ID="ad39d400-3314-48f8-977c-29a272eebad0"
          KEY_ID="74H4QHFPVP"
          private_key="
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgmtzyTVPL1cphRZjf
          pzIlE/6pV5OFCS6zaUoyqBIHflygCgYIKoZIzj0DAQehRANCAASQxfZ0NyqZre50
          6NGowYahQsvqEQew5MStUc94chxoi8QqtVNTOcsgzqflnQ/v7YeETnnUX+P+2+2E
          +EG+nw8t
          -----END PRIVATE KEY-----
          "

          token=$(ruby -rjwt -ropenssl -e "
            private_key_obj = OpenSSL::PKey::EC.new('$private_key')
            token = JWT.encode(
              {
                iss: '$ISSUER_ID',
                exp: Time.now.to_i + 20 * 60,
                aud: 'appstoreconnect-v1'
              },
              private_key_obj,
              'ES256',
              header_fields = {
                kid: '$KEY_ID'
              }
            )
            puts token
          ")
          
          echo "token=$token" >> $GITHUB_ENV
          
      - name: Revoke the hardcoded certificate
        run: |
          import requests
          import os

          # Hardcoded JWT and Certificate ID
       
          certificate_id = "2T5SFVWHZ9"

          # API URL
          url = f"https://api.appstoreconnect.apple.com/v1/certificates/{certificate_id}"
          headers = {
              "Authorization": f"Bearer {os.getenv('token')}",
          }
          
          # Making the DELETE request to revoke the certificate
          response = requests.delete(url, headers=headers)
          
          # Print the status and response content
          print(f"Status Code: {response.status_code}")
          if response.status_code == 204:
              print("Certificate revoked successfully.")
          else:
              print("Failed to revoke certificate.")
              print(response.text)
        shell: python

      # - name: Make API request and print full response
      #   run: |
      #     import requests
      #     import json
      #     import os
          
      #     # Your JWT and API URL
      #     url = "https://api.appstoreconnect.apple.com/v1/certificates"
      #     headers = {
      #         "Authorization": f"Bearer {os.getenv('token')}",
      #     }
          
      #     # Making the request
      #     response = requests.get(url, headers=headers)
          
      #     # Print the complete response content
      #     try:
      #         response_data = response.json()
      #         print(json.dumps(response_data, indent=4))
      #     except json.JSONDecodeError:
      #         print("Failed to decode JSON response.")
      #         print(response.text)
      #   shell: python

      
      # - name: Request Distribution Certificate from Apple Developer API
      #   run: |
      #     python <<EOF
      #     import os
      #     import requests
      
      #     # Get the CSR content from the environment variable
      #     csr_content = os.getenv('CSR_CONTENT')
      
      #     # Print CSR content for debugging
      #     print(f"CSR Content (Dynamic): {csr_content}")
      
      #     # API request to create the distribution certificate
      #     url = "https://api.appstoreconnect.apple.com/v1/certificates"
      #     headers = {
      #         "Authorization": f"Bearer {os.getenv('token')}",
      #         "Content-Type": "application/json"
      #     }
      #     data = {
      #         "data": {
      #             "type": "certificates",
      #             "attributes": {
      #                 "certificateType": "IOS_DISTRIBUTION",
      #                 "csrContent": csr_content
      #             }
      #         }
      #     }
      #     print(f"Request Data: {data}")
      
      #     response = requests.post(url, json=data, headers=headers)
      
      #     if response.status_code == 201:
      #         cert_data = response.json()['data']
      #         cert_id = cert_data['id']
      #         cert_serial_number = cert_data['attributes']['serialNumber']
              
      #         print(f"Certificate ID: {cert_id}")
      #         print(f"Serial Number: {cert_serial_number}")
              
      #         # Save the certificate content to a file
      #         cert_content = cert_data['attributes']['certificateContent']
      #         with open('distribution.cer', 'w') as cert_file:
      #             cert_file.write(cert_content)
      #         print("Distribution Certificate created successfully")
      
      #         # Export the Certificate ID to an environment variable
      #         with open(os.environ['GITHUB_ENV'], 'a') as env_file:
      #             env_file.write(f"CERTIFICATE_ID={cert_id}\n")
      #     else:
      #         print("Failed to create Distribution Certificate")
      #         print(response.status_code)
      #         print(response.json())
      #         exit(1)
      #     EOF
      
      # - name: Convert Certificate to .p12 format
      #   run: |
      #     openssl pkcs12 -export -inkey path/to/private/key -in distribution.cer -out distribution.p12 -password pass:${{ secrets.CERT_P12_PASSWORD }}
      
      # - name: Upload .p12 file as GitHub Actions artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: distribution-certificate
      #     path: distribution.p12
      
      # - name: Import certificate to keychain
      #   run: |
      #     security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
      #     security import distribution.p12 -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERT_P12_PASSWORD }}" -T /usr/bin/codesign
      #     security list-keychains -s ~/Library/Keychains/build.keychain
      #     security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" ~/Library/Keychains/build.keychain
